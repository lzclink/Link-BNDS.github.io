<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>APCSA_LAB3</title>
    <url>/APCSA-LAB3/</url>
    <content><![CDATA[<p>APCSA课上的奇妙入门难度lab…..。。。。。。<br>和OI比起来  普通人体系的CS确实是很亲民的。。。。<br>就是让你模拟你个自动售货机 要求格式比较严</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> cokeMS<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cash<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Have a Coke! Price: $1.25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">&lt;</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Insert coin:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">double</span> in<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> input<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>in<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>input<span class="token operator">==</span><span class="token number">10</span><span class="token operator">||</span>input<span class="token operator">==</span><span class="token number">25</span><span class="token operator">||</span>input<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">+=</span>input<span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Amount entered: "</span><span class="token operator">+</span>cash<span class="token operator">+</span><span class="token string">" cents."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>    
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ** Rejecting "</span><span class="token operator">+</span>input<span class="token operator">+</span><span class="token string">" cent coin. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please make your selection: \n 1 - Coke \n 2 - Coke Zero \n 3 - Caffeine Free Diet Coke "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Your choice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> c<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">-=</span><span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Dispensing Coke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">25</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning quarter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning dime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning nickel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">-=</span><span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Dispensing Coke Zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">25</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning quarter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning dime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning nickel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
 
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>    
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">-=</span><span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Dispensing Caffeine Free Diet Coke "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">25</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning quarter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning dime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning nickel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ** No such beverage. Choose another. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>APCSA_Practice</title>
    <url>/APCSA-Practice/</url>
    <content><![CDATA[<p>We developed an cross-platform, integrated, and graphical Java app based on JavaFX for BNDSer to practice AP CSA FRQs. </p>
<p>You can download the release at <a href="https://github.com/Link-BNDS/CSA_Practice_APP/releases/tag/AP">https://github.com/Link-BNDS/CSA_Practice_APP/releases/tag/AP</a>   .  You can also find the src at repo <a href="https://github.com/Link-BNDS/CSA_Practice_APP">https://github.com/Link-BNDS/CSA_Practice_APP</a>.</p>
<p>The description can also be found at that repo.  </p>
<p>Thanks for your support. </p>
]]></content>
  </entry>
  <entry>
    <title>C001</title>
    <url>/C001/</url>
    <content><![CDATA[<p>Mr. Puneet的理解和认知非常好。他说，IVY League的学校都太古板，和老旧了。终身教授制度使得这些学校的CS教育还是老式的，而且藤校学生一般更喜欢华尔街，金融。<br>只有像威斯康辛麦迪逊，卡内基梅隆，华盛顿大学西雅图，等等，是adopted的CS教育，why？因为他们和industry有联系。斯坦福虽然好，但是他们招学生时不仅仅看你的数学或者计算机能力，而是看你的综合能力，尽管你CS很强，但是你没有leadership，也不会招你。</p>
<p>比起竞赛，更重要的是什么呢？ 比如你暑假在某个科技公司实习，某个项目的某个部分是你写的。或者说你在github上有一个项目，你干了什么什么。</p>
]]></content>
  </entry>
  <entry>
    <title>D211229</title>
    <url>/D211229/</url>
    <content><![CDATA[<p>2021年12月29日夜，挺冷的。下了晚自习之后在操场夜跑，虽然情侣很多，空气很冰，但是星星们好美。</p>
<span id="more"></span>
<p>这学期学期内考试除了一个Statistics其他都完成了，加上会考，感觉就跟放假了一样。 Cal3还是寄了，主要原因是没有仔仔细细，无论是复习知识点，做题刷题还是考试，一定要做到仔仔细细。<br>英语因为别人表演戏剧的时候看手机导致虽然被暴扣10分，尽管攒够了全年级最高的附加分也无济于事：小不忍则乱大谋，可惜。<br>和向日葵稍微聊了聊，很开心。每天能和喜欢的女生聊两句天就已经非常开心了，哈哈，好卑微啊。<br>捏马的，IMMC队友现在跟我说他比赛那四天要整整一点考托福+拔牙，没见过这么摆烂离谱的。<br>学校里还是有很多整天搞得神秘兮兮“高大上”的social stuff，就是那种拿近了看 看起来很social，但是拿远了看就像过家家一样的所谓 social。<br>况且我本来就讨厌八面玲珑。<br>RUSH刚见面不久在和我聊的时候就感慨，我是一个solitary person，我觉得很对，而且我觉得solitary效率是最高的，你可以optimize自己所有的行动。<br>此外，自己行动还有利于自己进行深入的思考，这是我认为最好的地方，就如我喜欢冬天一样，冰冷能使人头脑冷静。<br>我觉得我和SJF挺像的。<br>好在十一的整体氛围还是不错的，自由且包容，就是绩点太严格了，因为我感觉课内学习就像对数函数一样，没必要。</p>
]]></content>
  </entry>
  <entry>
    <title>D211231</title>
    <url>/D211231/</url>
    <content><![CDATA[<p>今天回家之后先是浏览了一下BoBo的视频，然后又去看了一下杨光的。不禁感叹，都是知识改变命运的例子啊。一个是小镇做题浙大物院第一，Berkely 物理PHD转码，AirBnb成功。一个是清华建筑系，打拼到财务自由。<br><span id="more"></span></p>
<p>今天学校举办了狂欢节，我对这种东西的感觉很复杂，我喜欢十一的自由，开放，先进，进步。但是我同时不太喜欢这些fancy的活动，我怀疑有可能是我没有参与进去的原因，作为一个观察者来说确实融入不进去。</p>
]]></content>
  </entry>
  <entry>
    <title>D220105</title>
    <url>/D220105/</url>
    <content><![CDATA[<p>又看了很多峰哥的视频，我觉得峰哥这种生活确实和我喜爱的很像，不过还是有一些不同的地方的。</p>
<p>我真正喜爱的旅行有几个特点，就是自由。</p>
<p>比如说，自驾游历一串串的小地方，去站在一个旁观者的角度来观察审视分析这个地方，再以一个局外人的角色去体验一些东西，想走就走，想停就停。</p>
<p>还有就是说走就走的旅行，不过我喜欢不规划就走，要不然是你提前就对这个地方有了解，要不然就是这个地方哪都好。然后只需要一张去的机票，最好自驾，像日本这种地方可以地铁+铁路。然后多多去探索，一定要大胆，而且尝试，之前我的旅游很多尝试的机会要不然是因为胆小，嫌贵，或者看着不好而放弃。</p>
<p>和峰哥去的不同点是什么呢？从日本系列就可以看出来，峰哥拍的都是贫民窟，一兰拉面，和牛什么的。我的话更喜欢，札幌夜里的居酒屋，富士山下的小民宿，仙台的本地海鲜市场这种风格的旅行。</p>
<p>To see the world, things dangerous to come to, to see behind the walls, to draw closer, to find each other and to feel. That is the purpose of life.</p>
]]></content>
  </entry>
  <entry>
    <title>D220109</title>
    <url>/D220109/</url>
    <content><![CDATA[<p>从来没这么焦虑过，自己一个学期无数晚自习，无数次熬夜，无数次对着知识点左看右看，好不容易维持的GPA，就要在一次两个小时的期末考试里烟消云散，一想到这里就万分的焦虑。<br>CSA：平时分99.4，这要是再上不了A+，我就一头撞死吧。<br>统计：平时分100，可是老师也明确表示了就靠期末区分度，千万不能白瞎了。<br>语文：平时分98.5，千万不能期末一拉，整个学期完蛋。<br>经济：平时分98.6，千万不能说学期末一松，之前百干了。<br>CAL3：平时分97.15，这个必须全力复习。<br>政治：期中太拉，期末要考95才能上A+，直接放弃。<br>英语：别人演戏的时候玩手机被发现了，直接扣了10分，尽管有着年级最高的bonus也无济于事，放弃。</p>
]]></content>
  </entry>
  <entry>
    <title>D220110</title>
    <url>/D220110/</url>
    <content><![CDATA[<p>这次期末用我一整个学期每天的努力，换来了一个血的教训：尽管你平时复习考试再用功，再好好学，你期末不充足的复习，整个学期的努力全部白费了，尽管期末只占20%。<br>希望这次能饶恕我一次。</p>
]]></content>
  </entry>
  <entry>
    <title>D220125</title>
    <url>/D220125/</url>
    <content><![CDATA[<p>期末考试确实是看平时的积累，所以说即使期末的时候单独拿来复习的时间很短，平时学的透彻就没关系。这学期我期末考试平均每科复习1.5个小时，最后还是保住了5个A+，最开心的是Calculus3这门senior only的课拿了98，然后统计最后拿了99，Rush的经济拿了99，政治和英语这两个我极度不善产而且抵触的科目也拿了High A。<br>但是下次还是要好好复习，避免翻车。<br>昨天刚提交完IMMC的论文，狂干四天，结果今天休息一天明天就要开始早8晚8开始坐牢，哎，我恨标化，而且标化还是最重要的东西。    </p>
]]></content>
  </entry>
  <entry>
    <title>D220126</title>
    <url>/D220126/</url>
    <content><![CDATA[<p>真可惜，我的美本规划中最大的一个败笔就是没有好好学习标化，标化准备的太晚了。<br>只可惜我现在才意识到。</p>
]]></content>
  </entry>
  <entry>
    <title>D220129</title>
    <url>/D220129/</url>
    <content><![CDATA[<p>期末考试后本来分数差很多的，也在老师的提分下捞上去了很多，我的小小开心也逐渐消磨。数学建模竞赛，我的贫瘠的知识储备使得我们的实质内容很糟糕。HiMCM出结果，真的没想到居然结果会那么差：Honorable Mentioned。。。再也抬不起头来，假期还在每天拼命的学习托福，可惜大家都已经托福分手，ACT都快出分了，我还没有开刷。</p>
<p>我这一切失败的根源还是来自我不扎实的基础，和没有好好沉淀，以后好好沉淀吧。。希望能在备考AP前把Coursera machine learning上完，自己手写一个全连接反向传播神经网络出来。哎，还有AIME，托福，寒假作业，物理C。</p>
]]></content>
  </entry>
  <entry>
    <title>D220207</title>
    <url>/D220207/</url>
    <content><![CDATA[<p>我 从阴影中现身 重新夺回属于我的荣耀</p>
<span id="more"></span>
<p>高二下：</p>
<p>好好上课 GPA别掉就行<br>AP好好刷题<br>标化: 托福 ACT</p>
<p>呜呜</p>
<p>Coursera：<br> finish Machine learning<br> take history<br>Kaggle</p>
<p>With 学校周二AI</p>
<p>Pioneer</p>
<p>读完Lolita 和 高堡奇人</p>
<p>读几本历史书</p>
]]></content>
  </entry>
  <entry>
    <title>D220210</title>
    <url>/D220210/</url>
    <content><![CDATA[<p>每天上托福 已经高二下了寒假还在刷托福而不是ACT<br>无法接受20号托福再失利的后果<br>不过还好 还有很多时间考托福和ACT<br>整个一个考完AP的高二下+暑假+开学的一个月 还行<br>高二下 APAPAPAPAPAPAPAPAPAPAPAPAPAPAPA<br>托福托福托福托福托福托福托福托福托福托福托福<br>ACTACTACTACTACTACTACTACTACTACTACTACTACTACT<br>KaggleKaggleKaggleKaggleKaggleKaggleKaggleKaggleKaggleKaggle</p>
]]></content>
  </entry>
  <entry>
    <title>D220213</title>
    <url>/D220213/</url>
    <content><![CDATA[<p>本应该是快乐的一天，大雪纷飞。<br>可惜，不顺的时候喝凉水都会塞牙。<br>这托福，真的希望能出分啊。</p>
]]></content>
  </entry>
  <entry>
    <title>D220218</title>
    <url>/D220218/</url>
    <content><![CDATA[<p>啊<br>后天就考托福了<br>不过想想也没必要紧张，反正我要求不高，又不申夏校，只要比之前的拼分高一点就行。</p>
<p>假期还感兴趣了一些别的，比如星际争霸的re-take；日本那个全能房屋改造，看那些现代和风的建筑和装修真的很喜欢，以后一定要想办法多参观这种和风一户建。此外还有戏腔，非传统京剧，虽然是那些流行的比如探窗啊赤玲啥的，但是我觉得挺好听的。</p>
<p>开学了之后就可以开始稍微正常一点，闲适一点了，可惜要一遍刷AP，准备开学考。之后还得一边背ACT单词，一边读要读的Lolita 高堡奇人和历史书了，，。还要想办法抽出时间继续学习ML。。。。啊 还有物理C。。淦了</p>
]]></content>
  </entry>
  <entry>
    <title>D220219</title>
    <url>/D220219/</url>
    <content><![CDATA[<p>明天就要考托福了，这个成绩很大程度上决定了这个学期一开始的心态是如何。</p>
<p>我确实要减少使用手机的时间，手机带来了太多的：碎片化的，超前的，无意义的，只会带来紧张焦虑和分心的无意义内容。导致我的不能长时间集中注意力去做一件事情。</p>
]]></content>
  </entry>
  <entry>
    <title>D220222</title>
    <url>/D220222/</url>
    <content><![CDATA[<p>这两天过的还行吧。<br>20号的托福，看起来确实是看平时积累，阅读听力还行吧，就是写作写的太烂了，又要成为一个遗憾了哎。<br>下午发现过评一等奖了，好耶，终于翻身有幸能和本神们一起了。只不过可惜就是我A+的科目都是99，100.没A+的科目都是96，95.日了，GPA或成最大输家。<br>但是不如和我喜欢的女生一起散个步，可惜我一共只体会过两三次。<br>发现AP申请美本好难受啊，必须得有ACT，IB人家有预估分。我们这届没有ACT就是送死，加州虽然不看了但是减招国际生。<br>而且我的竞赛结果全都烂的一比导致honor list五个都写不满了，kaggle加油！<br>人家一直都说舔狗都是最低级的，可惜，我连舔都不会，甚至不敢，连当舔狗都不会当，我真是废物啊。<br>无数次想过放弃，可惜始终放不下。</p>
]]></content>
  </entry>
  <entry>
    <title>D220223</title>
    <url>/D220223/</url>
    <content><![CDATA[<p>忽然发现在学校这种全天学习，学和放松娱乐整合成一个整体的状态非常高效且舒适。总而言之就是一直在学并且放松，从早上一直到睡觉，并不像有些人想的那样，什么时候到什么时候全学，然后开始玩知道睡觉，我觉得这种学习时间的分隔感会降低学习效率。<br>此外，在看了那么多北师大实验国际部的申请成功案例之后，我终于意识到了一个事情，就是实验人均一个各种各样的科研，这才是他们成功的关键。<br>爱一个人却不敢接近，并不是因为爱得不够深；而是因为爱的足够深从而害怕失去这易碎且美好的挂念。</p>
]]></content>
  </entry>
  <entry>
    <title>D220226</title>
    <url>/D220226/</url>
    <content><![CDATA[<p>开学第一周过的平平淡淡，一定要沉下心来好好沉淀。<br>马上托福就要出分了，我真希望能上110啊，可惜恐怕这次独立写作写的太烂了。</p>
]]></content>
  </entry>
  <entry>
    <title>D220318</title>
    <url>/D220318/</url>
    <content><![CDATA[<p>夜风凛凛 独回望旧事前尘<br>是以往的我 充满怒愤<br>诬告与指责积压着满肚气不忿<br>对谣言反应甚为着紧<br>受了教训 得了书经的指引<br>现已看得透 不再自困<br>但觉有分数<br>不再像以往那般笨<br>抹泪痕轻快笑着行<br>冥冥中都早注定你富或贫<br>是错永不对真永是真<br>任你怎说安守我本份<br>始终相信沉默是金<br>是非有公理 慎言莫冒犯别人<br>遇上冷风雨休太认真<br>自信满心里 休理会讽刺与质问<br>笑骂由人 洒脱地做人<br><span id="more"></span></p>
<p>我常常觉得年级里有一些人非常的自私，或者非常的阴险。但是我直到最近才知道，其实并不是他们异于常人的自私，而是源于我本身奇怪的善良，导致我常常拿自己觉得应该对待别人的感觉来评判别人对我，或者别人对别人的情况。<br>实际上，我发现人类都非常的自私和虚伪，同时伴随着阴险与算计。 </p>
<p>人 就是世界上最丑恶的东西。</p>
<p>但是<br>我还是决定继续善良下去，哪怕会依旧像现在一样时而感到难受或不理解。</p>
]]></content>
  </entry>
  <entry>
    <title>D220224</title>
    <url>/D220224/</url>
    <content><![CDATA[<p>今天CSA考试昨天没有仔细读课本，小的知识点非常寄。还是要和上学期一样不管多简单的东西都要加倍认真啊。</p>
<p>还有，今天俄罗斯像乌克兰宣战，目前已经占领了乌克兰。<br>中文互联网上还有一堆人摇旗呐喊？还有人说是和TAIWAN一样的？<br>历史不会忘记他们对乌克兰做过的恶，乌克兰大饥荒这刻意制造的种族灭绝行为带来了750万死亡历史不会忘记，切尔诺贝利不会忘记。</p>
<p>现在清朝人的思想已经被洗脑到一个地步了，已经无药可救了。</p>
]]></content>
  </entry>
  <entry>
    <title>D220317</title>
    <url>/D220317/</url>
    <content><![CDATA[<p>我有的时候，太过于善良了，这不好。</p>
]]></content>
  </entry>
  <entry>
    <title>D220419</title>
    <url>/D220419/</url>
    <content><![CDATA[<p>累了<br><span id="more"></span><br>在Rush教室坐下，写下这段话。最近真的好累，身心俱疲。上周日下午是我理想的双休状态：打完ACSL直到AC，然后改IMMC Finalist的答辩ppt。<br>IMMC答辩PPT制作真的是折磨，很累，很time-consuming。不过也算是高中建模生涯的一个句号。和她一起从高一一年的建模课，到高二的讨论班，其中：9月份的CUMCM，11月份的HiMCM，1月的IMMC冬季赛，3月的IMMC国际赛，再到这周五的IMMC终选答辩，和她从CUMCM的S到IMMC现在的保底F，走过了太多。</p>
<p>高一和高二上的时候，我曾经很焦虑大学申请，但是我现在已经不焦虑了，只有等到真正结束了，才能有不一样的感悟。我高一刚入学的时候，<br>在听完了张神的演讲之后，我曾经梦想斯坦福，但是我过了几个小时就知道本科肯定没戏。后来我憧憬过康奈尔，再后来又迷恋卡梅，再到现在的在30-50之间的学校发现优点。</p>
<p>没想到这么早就要确定推荐信了，哎，不知道该选谁？ 到底是我学的很好的统计，同时也是我专业方向的老师我的导师王老师？还是非常Advanced的Cal3的高老师？还是Rush，还是Poth，还是Puneet？ 纠结啊。</p>
]]></content>
  </entry>
  <entry>
    <title>Artificial Ideals</title>
    <url>/D220424/</url>
    <content><![CDATA[<p>啊啊啊<br><span id="more"></span><br>有人说情人眼里出西施，但是真的不是这样的。这是我第一次，如此的爱一个人。因为她真的，是从灵魂上就有一种灵动的感觉，不像其他人。每当我想方设法让自己放下时，我看她一眼，之前费劲万分劝说自己放弃的努力就全部白费了。</p>
]]></content>
  </entry>
  <entry>
    <title>D220624</title>
    <url>/D220624/</url>
    <content><![CDATA[<p>我意识到了，我现在的失败是由我内心的浮躁造成的。无法自律，无法持续，无法精心。在各种现代电子平台和设备下迷失在了浮躁的电子流中。<br>我需要找到我的inner peace</p>
]]></content>
  </entry>
  <entry>
    <title>FA000</title>
    <url>/FA000/</url>
    <content><![CDATA[<h2 id="Introduction-To-Failurology"><a href="#Introduction-To-Failurology" class="headerlink" title="Introduction To Failurology"></a>Introduction To Failurology</h2><h5 id="你的成功-令人羡慕"><a href="#你的成功-令人羡慕" class="headerlink" title="你的成功 令人羡慕"></a>你的成功 令人羡慕</h5><h5 id="我的失败-彻彻底底"><a href="#我的失败-彻彻底底" class="headerlink" title="我的失败 彻彻底底"></a>我的失败 彻彻底底</h5>]]></content>
  </entry>
  <entry>
    <title>FA001</title>
    <url>/FA001/</url>
    <content><![CDATA[<h2 id="失败学三大理论-Three-Fundamental-Theorems-of-Failurology"><a href="#失败学三大理论-Three-Fundamental-Theorems-of-Failurology" class="headerlink" title="失败学三大理论 Three Fundamental Theorems of Failurology"></a>失败学三大理论 Three Fundamental Theorems of Failurology</h2><h3 id="失败的的哲学必然性-The-Philosophical-Necessity-of-Failure"><a href="#失败的的哲学必然性-The-Philosophical-Necessity-of-Failure" class="headerlink" title="失败的的哲学必然性 The Philosophical Necessity of Failure"></a>失败的的哲学必然性 The Philosophical Necessity of Failure</h3><p>失败是基础态，成功是激发态；事实上，失败不是一种状态，而是一片海洋。在失败之海中，成功只是一个又一个的孤岛；你可能能够通过努力站上一个小岛，但是接下来你面对的，又是一片大海；从一个岛跳到另一个岛的旅程是无止尽的，在这个情况下，你为什么不直接去拥抱大海呢？<br>Failure is the basic state, success is the excited state. In fact, failure is not a state, it is an ocean in which successes are just several islands. You may be able to get to an island, but the next thing you faced, it’s the ocean. The journey from island to island is endless, in which case, why don’t you just embrace the ocean?</p>
<h3 id="人类社会的结构性失败-Structural-Failures-of-Human-Society"><a href="#人类社会的结构性失败-Structural-Failures-of-Human-Society" class="headerlink" title="人类社会的结构性失败 Structural Failures of Human Society"></a>人类社会的结构性失败 Structural Failures of Human Society</h3><p>在人类社会的结构中，特别是现行的资本主义框架内，99.99999%的人都是韭菜。最新的数据显示，2019年一年，全世界最富裕的前500名富豪，他们的净资产增加了25%，约合6万亿美金。而占全球99.99999%的人的资产增加的相对值和绝对值可能都无法与之媲美。在资本主义道德下，这些中产阶级和劳动者们一方面要对资本家感恩戴德，感谢他们提供的工作机会；另外一方面，又要合理化资本家的收入，觉得这一切都是资本家们应得的。在这个前提下，中产阶级和劳动者们的工作时间却加长了（到了996还不够）。在这种框架下，99.99999%的人都只能是资本的韭菜，贡献时间、消费和劳动力。<br>In human society, especially capitalism,99.99999% of people are leeks(It’s a self-deprecating term implying they are being played for suckers, just faceless vegetables harvested by big companies and the government). According to the latest data, the net worth of the world’s 500 richest people increased by 25% in 2019. And 99.99999% of the world’s population may not be able to match that in terms of relative and absolute value. Under capitalist morality, the middle class and workers are beholden to the capitalists for the jobs they provide. On the other hand, they rationalize the income of capitalists, thinking that they deserve it, and on this premise, the middle class and workers work longer hours (996 is not enough). Under this framework,99.99999% of the people are just leves of capital, contributing time consumption and labor.</p>
<h3 id="失败与自私相辅相成：失败在基因上的必然性-Failure-and-Selfishness-Go-Hand-in-Hand-The-Genetic-Inevitability-of-Failure"><a href="#失败与自私相辅相成：失败在基因上的必然性-Failure-and-Selfishness-Go-Hand-in-Hand-The-Genetic-Inevitability-of-Failure" class="headerlink" title="失败与自私相辅相成：失败在基因上的必然性 Failure and Selfishness Go Hand in Hand: The Genetic Inevitability of Failure"></a>失败与自私相辅相成：失败在基因上的必然性 Failure and Selfishness Go Hand in Hand: The Genetic Inevitability of Failure</h3><p>在人类长期进化的过程中，人类养成了自私的天性。毕竟在远古时期，不自私的人早就饿死了。在自私的加成下，人无法真心体会他人的痛苦，人只能一方面虚假的追求公平而另一方面又对自己所占有的所谓“优势”沾沾自喜。这种虚假平等和真实不平等的矛盾，让人永远不可能真心设计出人人成功的制度。人只能一方面把失败的原因归咎于自己不努力，却对全世界粮食远超人类所需但还是有人饿死这件事视而不见；又另一方面甘愿沦为他人的韭菜只为了自己多赚一点钱。甚至有人诞生了“是自私推动人类进步”这样荒谬绝伦的想法来为自己的困境合理化。因为人类自私的基因，导致人类无法克服“韭菜之障“达到真正的全局最优（只能达到某些人的局部最优，但简单的数学就能告诉我们，局部最优的和也不是全剧最优），因此人类社会是必然失败的。根本不值得期待。<br>During the evolution, people who were not selfish died of hunger long ago. With the addition of selfishness, people could not truly feel the pain of others. They pursue ostensible fairness in one hand, and they are complacent about the so-called advantages they possessed in another hand. This contradiction between ostensible equality and real inequality makes it impossible to truly design a system in which everyone succeeds. Ironically, people can only blame failure on their own lack of effort, but turn a blind eye to the fact that there are still people starving to death in a world where there is far more food than people need. People are willing to become a leek just to make a little more money for themselves. Some people have even come up with a absurd idea that “selfishness drives human progress” to justify their plight. Because human beings are genetically selfish and cannot overcome the “leek barrier”.  Achieving true global optimality (Today’s world could only reach the local optimality for some people, but simple mathematics can tell us that local optimality are not global optimality), and therefore human society is a failure that is not worth expecting at all…!</p>
<span id="more"></span>
<p>摘自：德州手抄<br><a href="https://zhuanlan.zhihu.com/p/99897411">https://zhuanlan.zhihu.com/p/99897411</a></p>
]]></content>
  </entry>
  <entry>
    <title>DR001</title>
    <url>/DR001/</url>
    <content><![CDATA[<h3 id="我目前的理想与梦想"><a href="#我目前的理想与梦想" class="headerlink" title="我目前的理想与梦想"></a>我目前的理想与梦想</h3><p>不知道大家是更喜欢详细规划的旅行，还是说走就走的旅行。</p>
<p>每个人都有自己的理想与梦想，我的看起来甚至有一些寒碜。 我的关键字是： 自由。  至于什么是自由的，我的理解就是选择的权力。我喜欢旅游，或者说是去探索未知。<br>至于怎么样的旅游是我喜欢的呢？ 就是一张去程的机票，有足够的金钱和能力（例如沟通能力），我不喜欢干规划好的计划，那种情况下的旅游仿佛不是旅游，而是完成计划本身。曾经我在学生组团的时候最喜欢的，就是晚上偷偷溜出酒店，在空无一人的日本夜晚的街道上游走，或是进入一家拉面馆吃面，或是走着走着忽然发现了任天堂日本本部。我喜欢这种深度游，真正的去感受，真正的去体验。此外，我还喜欢一众活动，比如滑雪，探险，远足等等</p>
]]></content>
  </entry>
  <entry>
    <title>FA002</title>
    <url>/FA002/</url>
    <content><![CDATA[<h2 id="后悔失败学-The-Law-of-Regret-in-Failurology"><a href="#后悔失败学-The-Law-of-Regret-in-Failurology" class="headerlink" title="后悔失败学 The Law of Regret in Failurology"></a>后悔失败学 The Law of Regret in Failurology</h2><p>人生的主旋律就是后悔，就是那种怎么选都会后悔的后悔。因为时间不可倒流，人生无法重来。不存在什么假如当时，更没有平行时空去给你验证一下，如果当时你怎么怎么样，最后的结果可能会不会就不是这样了。不同的人在同一个人生十字路口会选择不一样的方向。但并不是和你同时站在那个路口，但是却做了另外一个选择的人，他后来走出的人生剧本，就会是你假如也做了那个选择的剧本。我也曾无数次懊悔过以前的选择，也时常在想，如果当初我做了另外一个选择，会不会后来就没有那么多懊悔和遗憾了？转眼多年过去了，我已经越来越相信，这就是人生，怎么选，都会后悔。与其后悔，不如既往不恋，把握当下，迎接未来。</p>
<p>The central theme of life is regret, which is the kind of regret you must experience whichever you choose. Because time cannot turn time back, life cannot restart life. There is no what if at that time; there is no parallel time to give you a test; the final result may not be different for each choice you made. Different people will choose different directions at the same crossroads of life. But it is not true that the one who stood on the same corner as you were will have the same future as if you chose to go in that direction. I have regretted the previous choice many times and often wonder if I had made another choice, would there have been less regret? Years have passed, I have become more and more convinced that this is life, how to choose, will regret. Rather than regret, it is better not to love in the past, seize the present and welcome the future.</p>
]]></content>
  </entry>
  <entry>
    <title>FU017</title>
    <url>/FU017/</url>
    <content><![CDATA[<p><img src="/img/SSS.jpg" alt="StarShip"></p>
<span id="more"></span>
<h2 id="展望17"><a href="#展望17" class="headerlink" title="展望17"></a>展望17</h2><p>不想说很多具体和虚的。 </p>
<p>我只想说：在自己喜爱的方向上：如统计&amp;ML&amp;历史，积累并沉淀，标化和GPA接受与争取，向日葵。</p>
]]></content>
  </entry>
  <entry>
    <title>Lab_Name</title>
    <url>/Lab-Name/</url>
    <content><![CDATA[<p>可以参考一下，虽然我没加注释吧。。。。<br>凑活一下。。。<br>LAB Requirement<br><img src="/img/CSALAB/name.png" alt="req"></p>
<p>The Name Class<br><pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> first<span class="token punctuation">,</span>middle<span class="token punctuation">,</span>last<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span> <span class="token class-name">String</span> m<span class="token punctuation">,</span> <span class="token class-name">String</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        first<span class="token operator">=</span>f<span class="token punctuation">;</span>
        middle<span class="token operator">=</span>m<span class="token punctuation">;</span>
        last<span class="token operator">=</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> middle<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> last<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">firstMiddleLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>middle<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>last<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">lastFirstMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> last<span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span>first<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>middle<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Name</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>middle<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>last<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">initials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>middle<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>last<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>middle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>last<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>The TestName Class</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestName</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter the name of the first person. Format: firstname middlename lastname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Name</span> person1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter the name of the second person. Format: firstname middlename lastname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Name</span> person2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">firstMiddleLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">lastFirstMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">initials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">firstMiddleLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">lastFirstMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">initials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"They have the same name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"They don't have the same name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>G11S1</title>
    <url>/G11S1/</url>
    <content><![CDATA[<h1 id="我的高二上"><a href="#我的高二上" class="headerlink" title="我的高二上"></a>我的高二上</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>总览</li>
<li>分科</li>
<li>寒假</li>
<li>展望</li>
</ul>
<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>有几个大体上的感慨：</p>
<ul>
<li>其实对于普通的课业来讲，学好，或者说取得一个好成绩十分简单。上课认真听讲做笔记，下课仔细复习多练习。没有别的，高一我两个都没有做到，上课拿一个平板打游戏刷知乎，晚自习打游戏看视频，所以非常失败；高二开学我意识到了这点，我开始上课认真听讲，认真做笔记。可惜下课之后还是无法克服自己的懒惰，没有积极的复习和练习，尤其是期末考试前复习基本等于零，造就了我平时分很高但是期末分很低最后学期GPA很可惜的惨剧。</li>
<li>非常不自律，在没有什么事情的晚自习，或者周末回到家中，我的有效学习时间接近于零，这是因为我从小就没有养成一个自律的好习惯和没有学会如何延时满足。我宁可将庞大的事情拖到最后熬夜赶完，也不会先去完成之后再玩。以至于很多时候自己都会叹息：如果要是早点准备的话结果会好很多。可惜很多时候，因为我有一定的能力和天赋还有临场反应能力，导致这些临时赶出来的东西甚至会达到一个好的效果。这种反向正反馈给我养成延迟满足的好习惯造成了极大的负面效果。</li>
<li>不能沉淀，虽然我的个性签名都已经改成了沉淀，但是我依然不会沉淀。在我心中最好的状态就是除了平常的学习，要考的标化以外，有一个自己喜欢，有趣，而且有用的一个可以是爱好也好，或者是一个学习领域也好。每天干完了要干的事情，就开始全心全意的投入到这个事情上去。久而久之就沉淀了下来，就成功了。希望我在寒假和下学期能够在机器学习，kaggle社区里好好沉淀与学习。</li>
<li>其实对于GPA最大的心理内耗是并不是源于自己的绝对分数，而是源于比如：别人的科目好拿GPA拿了A+，或者是别人有很多96.5或者89.5，感觉自己一个学期每天花那么多时间努力和他们没什么差距。这些距离感反而更能使人难受。尤其是比如别人CSP平时小测期中给分高还水，自己CSA每天刻苦复习刷题背知识点，最后结果（在分数上）没什么差距，我当然知道真正掌握知识的不同，但是GPA的重要性使我想不了这么多。</li>
<li>愿这些遗憾与仇恨在以后化身沉淀的动力吧。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Logistic_Regression</title>
    <url>/Logistic-Regression/</url>
    <content><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>在Coursera上吴恩达的Machine Learning中，Logistic Regression作为初学者们接触到的第二个模型，其本身是非常重要的。但是在课程当中其损失函数的梯度公式则被一笔带过。而很多人都对其为什么与线性回归的损失函数梯度是一样的表示好奇，因此，我特地从头推导了这一式子。</p>
<h3 id="2-逻辑斯蒂回归损失函数梯度推导"><a href="#2-逻辑斯蒂回归损失函数梯度推导" class="headerlink" title="2. 逻辑斯蒂回归损失函数梯度推导"></a>2. 逻辑斯蒂回归损失函数梯度推导</h3><h4 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1. Introduction"></a>2.1. Introduction</h4><p>The “Machine Learning” course on Coursera is a one of the most popular course over all of MOOC. This course is famous for its simplified teaching step and other bright spots. Logistics regression, as the most important model for beginner, lacks appropriate detailed derivation of formula. In this blog, I am going to expound this section step by step.</p>
<h4 id="2-2-Logistic-Regression"><a href="#2-2-Logistic-Regression" class="headerlink" title="2.2. Logistic Regression"></a>2.2. Logistic Regression</h4><p>I think most of you have already got familiar with logistic regression.</p>
<h4 id="2-3-Cost-Function"><a href="#2-3-Cost-Function" class="headerlink" title="2.3. Cost Function"></a>2.3. Cost Function</h4><p>As we all know, the cost function of the logistic regression is modified from the one from linear regression model.</p>
<script type="math/tex; mode=display">
Cost\left( h_{\theta}\left( x \right) ,y \right) =\left\{ \begin{aligned}
    -\log \left( h_{\theta}\left( x \right) \right) \,\,   if\,\,y&=1\\
    -\log \left( 1-h_{\theta}\left( x \right) \right) \,\, if\,\,y&=0\\
\end{aligned} \right.</script><p>To simplify this function, we can write it as</p>
<script type="math/tex; mode=display">
J\left( \theta \right) =\frac{1}{2m}\sum_{i=1}^m{Cost\left( h_{\theta}\left( x^{\left( i \right)} \right) ,y^{\left( i \right)} \right)}</script><p>which</p>
<script type="math/tex; mode=display">
Cost\left( h_{\theta}\left( x^{\left( i \right)} \right) ,y^{\left( i \right)} \right) =-y^{\left( i \right)}\log \left( h_{\theta}\left( x \right) \right) -\left( 1-y^{\left( i \right)} \right) \log \left( 1-h_{\theta}\left( x^{\left( i \right)} \right) \right)</script><h4 id="2-4-Gradient-of-Cost-Function"><a href="#2-4-Gradient-of-Cost-Function" class="headerlink" title="2.4. Gradient of Cost Function"></a>2.4. Gradient of Cost Function</h4><p>And next, is the part I want to expound. Andrew, in this MOOC, just briefly introduce that the gradient of the new cost function is the same as the one for linear regression. There is no explicit derivation here. </p>
<p>For cost function $J$, we can write it as</p>
<p>\begin{equation}<br>\begin{aligned}<br>J\left( \theta \right) &amp;=-\frac{1}{m}\left[ \sum<em>{i=1}^m{-y^{\left( i \right)}\log \left( h</em>{\theta}\left( x \right) \right) -\left( 1-y^{\left( i \right)} \right) \log \left( 1-h<em>{\theta}\left( x^{\left( i \right)} \right) \right)} \right]<br>\<br>\frac{\partial}{\partial \theta _j}J\left( \theta \right) &amp;=\frac{\partial}{\partial \theta _j}\left[ -\frac{1}{m}\left[ \sum</em>{i=1}^m{-y^{\left( i \right)}\log \left( h<em>{\theta}\left( x \right) \right) -\left( 1-y^{\left( i \right)} \right) \log \left( 1-h</em>{\theta}\left( x^{\left( i \right)} \right) \right)} \right] \right]<br>\<br>&amp;=-\frac{1}{m}\left[ \sum<em>{i=1}^m{\left( y^{\left( i \right)}\frac{1}{h</em>{\theta}\left( x^{\left( i \right)} \right)}\cdot \frac{\partial}{\partial \theta <em>j}h</em>{\theta}\left( x^{\left( i \right)} \right) +\left( 1-y^{\left( i \right)} \right) \cdot \frac{1}{1-h<em>{\theta}\left( x^{\left( i \right)} \right)}\cdot \frac{\partial}{\partial \theta _j}\left( -h</em>{\theta}\left( x^{\left( i \right)} \right) \right) \right)} \right]<br>\<br>&amp;=-\frac{1}{m}\left[ \sum<em>{i=1}^m{\left( y^{\left( i \right)}\frac{1}{h</em>{\theta}\left( x^{\left( i \right)} \right)}-\left( 1-y^{\left( i \right)} \right) \cdot \frac{1}{1-h<em>{\theta}\left( x^{\left( i \right)} \right)} \right) \cdot \frac{\partial}{\partial \theta _j}\left( h</em>{\theta}\left( x^{\left( i \right)} \right) \right)} \right]<br>\<br>&amp;=-\frac{1}{m}\left[ \sum_{i=1}^m{\left( y^{\left( i \right)}\frac{1}{g\left( \theta ^Tx \right)}-\left( 1-y^{\left( i \right)} \right) \cdot \frac{1}{1-g\left( \theta ^Tx \right)} \right) \cdot \frac{\partial}{\partial \theta _j}\left( g\left( \theta ^Tx \right) \right)} \right] </p>
<p>\end{aligned}<br>\end{equation}</p>
<p>In logistic regression, we use the logistic function as our decision function. Therefore, (Mentioned: $T$ refers to transpose)</p>
<p>\begin{equation}<br>    \begin{aligned}<br>\frac{\partial}{\partial \theta _j}g\left( \theta ^Tx \right) &amp;=\frac{\partial}{\partial \theta _j}\cdot \frac{1}{1+e^{-\theta ^Tx}}<br>\<br>&amp;=\frac{\partial}{\partial \theta _j}\left( 1+e^{-\theta ^Tx} \right) ^{-1}<br>\<br>&amp;=-\left( 1+e^{-\theta ^Tx} \right) ^{-2}\cdot e^{e^{-\theta ^Tx}}\cdot x<br>\<br>&amp;=-\frac{e^{e^{-\theta ^Tx}}\cdot -x}{\left( 1+e^{e^{-\theta ^Tx}} \right) ^2}<br>    \end{aligned}<br>\end{equation}</p>
<p>We set $k=e^{-\theta ^Tx}$, plug it in,</p>
<p>\begin{equation}<br>    \begin{aligned}<br>&amp;=\frac{k}{\left( 1+k \right) ^2}\cdot x<br>\<br>&amp;=\left( \frac{1}{1+k}\cdot \frac{1+k-1}{1+k} \right) \cdot x<br>\<br>&amp;=\left[ \frac{1}{1+k}\cdot \left( 1-\frac{1}{1+k} \right) \right] \cdot x<br>    \end{aligned}<br>\end{equation}</p>
<p>Bring it back, we can see we construct the logistic function itself,</p>
<p>\begin{equation}<br>    \begin{aligned}<br>    &amp;=\left[ \frac{1}{1+e^{-\theta ^Tx}}\cdot \left( 1-\frac{1}{1+e^{-\theta ^Tx}} \right) \right] \cdot x<br>    \end{aligned}<br>\end{equation}</p>
<p>Thus, we can use the logistic function to simplify the eqution,</p>
<p>\begin{equation}<br>    \begin{aligned}<br>&amp;=\left[ \frac{1}{1+e^{-\theta ^Tx}}\cdot \left( 1-\frac{1}{1+e^{-\theta ^Tx}} \right) \right] \cdot x<br>\<br>&amp;=g\left( \theta ^Tx \right) \cdot \left( 1-g\left( \theta ^Tx \right) \right) \cdot x<br>    \end{aligned}<br>\end{equation}</p>
<p>We plug back this portion to the gradient of cost function (1), </p>
<p>\begin{equation}<br>    \begin{aligned}<br>\frac{\partial}{\partial \theta <em>j}J\left( \theta \right) &amp;=-\frac{1}{m}\left[ \sum</em>{i=1}^m{\left( y^{\left( i \right)}\cdot \frac{1}{g\left( \theta ^Tx \right)}-\left( 1-y^{\left( i \right)} \right) \cdot \frac{1}{1-g\left( \theta ^Tx \right)} \right)}\cdot g\left( \theta ^Tx \right) \cdot \left( 1-g\left( \theta ^Tx \right) \right) \cdot x^{\left( i \right)} \right]<br>\<br>&amp;=-\frac{1}{m}\left[ \sum<em>{i=1}^m{\left[ y^{\left( i \right)}\cdot \left( 1-g\left( \theta ^Tx \right) \right) \cdot x^{\left( i \right)}-\left( 1-y^{\left( i \right)} \right) \cdot g\left( \theta ^Tx \right) \cdot x^{\left( i \right)} \right]} \right]<br>\<br>&amp;=-\frac{1}{m}\sum</em>{i=1}^m{\left[ y^{\left( i \right)}\cdot x^{\left( i \right)}-y^{\left( i \right)}\cdot g\left( \theta ^Tx \right) \cdot x^{\left( i \right)}-g\left( \theta ^Tx \right) \cdot x^{\left( i \right)}+y^{\left( i \right)}\cdot g\left( \theta ^Tx \right) \cdot x^{\left( i \right)} \right]}<br>\<br>&amp;\mathrm{because}-y^{\left( i \right)}\cdot g\left( \theta ^Tx \right) \cdot x^{\left( i \right)}\,\,\mathrm{offsets} +y^{\left( i \right)}\cdot g\left( \theta ^Tx \right) \cdot x^{\left( i \right)}<br>\<br>&amp;=-\frac{1}{m}\sum<em>{i=1}^m{\left[ y^{\left( i \right)}\cdot x^{\left( i \right)}-g\left( \theta ^Tx \right) \cdot x^{\left( i \right)} \right]}<br>\<br>&amp;=-\frac{1}{m}\sum</em>{i=1}^m{\left[ \left[ y^{\left( i \right)}-g\left( \theta ^Tx \right) \right] \cdot x^{\left( i \right)} \right]}<br>\<br>&amp;=\frac{1}{m}\sum<em>{i=1}^m{\left[ \left[ h</em>{\theta}\left( x^{\left( i \right)} \right) -y^{\left( i \right)} \right] \cdot x^{\left( i \right)} \right]}<br>  \end{aligned}<br>\end{equation}</p>
<p>which is the same as linear regression’s </p>
<p>Q.E.D.</p>
]]></content>
  </entry>
  <entry>
    <title>JudgementDay</title>
    <url>/JudgementDay/</url>
    <content><![CDATA[<p>阳了发烧两天，家里现金流还快断了，今天早上爬起来一看portal，WashU拒了。</p>
]]></content>
  </entry>
  <entry>
    <title>ML_ex1</title>
    <url>/ML-ex1/</url>
    <content><![CDATA[<h3 id="Machine-Learning-By-Andrew-Ng"><a href="#Machine-Learning-By-Andrew-Ng" class="headerlink" title="Machine Learning By Andrew Ng"></a>Machine Learning By Andrew Ng</h3><h4 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h4><ul>
<li>Introduction</li>
<li>Potential Submit Problem</li>
<li>ex1.m</li>
<li>computerCost.m</li>
<li>gradientDescent.m</li>
<li>ex1_multi.m</li>
<li>featureNormalize.m</li>
<li>computeCostMulti.m</li>
<li>gradientDescentMulti.m</li>
<li>normalEqn.m</li>
</ul>
<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>I have listened for so many times that the course: Machine Learning by Andrew Ng is one of the best introductory course for machine learning.<br>Now, I have finished the first two week’s classed and pass the first programming project. I truly fathom out the deliberate design of this course. The passion and meticulous designed project impress me as well. It is so particular that I feel like someone is teaching me hand-by-hand.<br>Coursera uses a kind of judging method which is not like the common OJ that you upload your program and they run it and test it with their test data. Coursera uses an aggregate local submit module that can do all the stuff. You just need to generate a token that linked to your coursera account so that it can upload your progress. It is so cooooool!!!!!!<br> <img src="/img/ML/ex1/f1.png" alt="f1"><br> <img src="/img/ML/ex1/f2.png" alt="f2"></p>
<h5 id="Potential-Submit-Problem"><a href="#Potential-Submit-Problem" class="headerlink" title="Potential Submit Problem"></a>Potential Submit Problem</h5><p>Once I tried to submit the program, it says<br><img src="/img/ML/ex1/d1.png" alt="d1"><br>According to <a href="https://blog.csdn.net/qq_44498043/article/details/105904715">https://blog.csdn.net/qq_44498043/article/details/105904715</a> and <a href="https://blog.csdn.net/weixin_45923568/article/details/104193579">https://blog.csdn.net/weixin_45923568/article/details/104193579</a> , I found out that the error is caused by the vulnerable grammar that it used before. And in the latest version of matlab, matlab banned those kinds of grammar in order to increase the stability. So all we need is to go to the coursera website and download the new version of submit module. </p>
<h4 id="ex1-m"><a href="#ex1-m" class="headerlink" title="ex1.m"></a>ex1.m</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% Initialization</span>
clear <span class="token punctuation">;</span> close all<span class="token punctuation">;</span> clc

<span class="token comment">%% ==================== Part 1: Basic Function ====================</span>
<span class="token comment">% Complete warmUpExercise.m</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Running warmUpExercise ... \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'5x5 Identity Matrix: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">warmUpExercise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% ======================= Part 2: Plotting =======================</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Plotting Data ...\n'</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'ex1data1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% number of training examples</span>

<span class="token comment">% Plot Data</span>
<span class="token comment">% Note: You have to complete the code in plotData.m</span>
<span class="token function">plotData</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% =================== Part 3: Cost and Gradient descent ===================</span>

X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">% Add a column of ones to x</span>
theta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% initialize fitting parameters</span>

<span class="token comment">% Some gradient descent settings</span>
iterations <span class="token operator">=</span> <span class="token number">1500</span><span class="token punctuation">;</span>
alpha <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\nTesting the cost function ...\n'</span><span class="token punctuation">)</span>
<span class="token comment">% compute and display initial cost</span>
J <span class="token operator">=</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'With theta = [0 ; 0]\nCost computed = %f\n'</span><span class="token punctuation">,</span> J<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Expected cost value (approx) 32.07\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% further testing of the cost function</span>
J <span class="token operator">=</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\nWith theta = [-1 ; 2]\nCost computed = %f\n'</span><span class="token punctuation">,</span> J<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Expected cost value (approx) 54.24\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\nRunning Gradient Descent ...\n'</span><span class="token punctuation">)</span>
<span class="token comment">% run gradient descent</span>
theta <span class="token operator">=</span> <span class="token function">gradientDescent</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% print theta to screen</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta found by gradient descent:\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'%f\n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Expected theta values (approx)\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' -3.6303\n  1.1664\n\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Plot the linear fit</span>
hold on<span class="token punctuation">;</span> <span class="token comment">% keep previous plot visible</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token operator">*</span>theta<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span>
<span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'Training data'</span><span class="token punctuation">,</span> <span class="token string">'Linear regression'</span><span class="token punctuation">)</span>
hold off <span class="token comment">% don't overlay any more plots on this figure</span>

<span class="token comment">% Predict values for population sizes of 35,000 and 70,000</span>
predict1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">]</span> <span class="token operator">*</span>theta<span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'For population = 35,000, we predict a profit of %f\n'</span><span class="token punctuation">,</span><span class="token punctuation">...</span>
    predict1<span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
predict2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> theta<span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'For population = 70,000, we predict a profit of %f\n'</span><span class="token punctuation">,</span><span class="token punctuation">...</span>
    predict2<span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% ============= Part 4: Visualizing J(theta_0, theta_1) =============</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Visualizing J(theta_0, theta_1) ...\n'</span><span class="token punctuation">)</span>

<span class="token comment">% Grid over which we will calculate J</span>
theta0_vals <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
theta1_vals <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% initialize J_vals to a matrix of 0's</span>
J_vals <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>theta0_vals<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length</span><span class="token punctuation">(</span>theta1_vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Fill out J_vals</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>theta0_vals<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>theta1_vals<span class="token punctuation">)</span>
	  t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">theta0_vals</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">theta1_vals</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	  <span class="token function">J_vals</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">% Because of the way meshgrids work in the surf command, we need to</span>
<span class="token comment">% transpose J_vals before calling surf, or else the axes will be flipped</span>
J_vals <span class="token operator">=</span> J_vals<span class="token operator">'</span><span class="token punctuation">;</span>
<span class="token comment">% Surface plot</span>
figure<span class="token punctuation">;</span>
<span class="token function">surf</span><span class="token punctuation">(</span>theta0_vals<span class="token punctuation">,</span> theta1_vals<span class="token punctuation">,</span> J_vals<span class="token punctuation">)</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'\theta_0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'\theta_1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Contour plot</span>
figure<span class="token punctuation">;</span>
<span class="token comment">% Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100</span>
<span class="token function">contour</span><span class="token punctuation">(</span>theta0_vals<span class="token punctuation">,</span> theta1_vals<span class="token punctuation">,</span> J_vals<span class="token punctuation">,</span> <span class="token function">logspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'\theta_0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'\theta_1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hold on<span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">theta</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">theta</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rx'</span><span class="token punctuation">,</span> <span class="token string">'MarkerSize'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="computerCost-m"><a href="#computerCost-m" class="headerlink" title="computerCost.m"></a>computerCost.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> J <span class="token operator">=</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span>
<span class="token comment">%COMPUTECOST Compute cost for linear regression</span>
<span class="token comment">%   J = COMPUTECOST(X, y, theta) computes the cost of using theta as the</span>
<span class="token comment">%   parameter for linear regression to fit the data points in X and y</span>

<span class="token comment">% Initialize some useful values</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% number of training examples</span>

<span class="token comment">% You need to return the following variables correctly </span>
J <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: Compute the cost of a particular choice of theta</span>
<span class="token comment">%               You should set J to the cost.</span>
X_pd<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X_pd<span class="token operator">=</span>X<span class="token operator">*</span>theta<span class="token punctuation">;</span>
J<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">-</span>X_pd<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
J<span class="token operator">=</span>J<span class="token operator">./</span><span class="token punctuation">(</span><span class="token number">2.</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">% =========================================================================</span>

<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="gradientDescent-m"><a href="#gradientDescent-m" class="headerlink" title="gradientDescent.m"></a>gradientDescent.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span>theta<span class="token punctuation">,</span> J_history<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradientDescent</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> num_iters<span class="token punctuation">)</span>
<span class="token comment">%GRADIENTDESCENT Performs gradient descent to learn theta</span>
<span class="token comment">%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by </span>
<span class="token comment">%   taking num_iters gradient steps with learning rate alpha</span>

<span class="token comment">% Initialize some useful values</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% number of training examples</span>
J_history <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>num_iters<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> iter <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>num_iters

    <span class="token comment">% ====================== YOUR CODE HERE ======================</span>
    <span class="token comment">% Instructions: Perform a single gradient step on the parameter vector</span>
    <span class="token comment">%               theta. </span>
    %
    <span class="token comment">% Hint: While debugging, it can be useful to print out the values</span>
    <span class="token comment">%       of the cost function (computeCost) and gradient here.</span>
    %

    theta<span class="token operator">=</span>theta<span class="token operator">-</span>alpha<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token operator">*</span>X<span class="token operator">'</span><span class="token operator">*</span><span class="token punctuation">(</span>X<span class="token operator">*</span>theta<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">% ============================================================</span>

    <span class="token comment">% Save the cost J in every iteration    </span>
    <span class="token function">J_history</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> <img src="/img/ML/ex1/f3.png" alt="f3"><br> <img src="/img/ML/ex1/suc1.png" alt="suc1"></p>
<h5 id="ex1-multi-m"><a href="#ex1-multi-m" class="headerlink" title="ex1_multi.m"></a>ex1_multi.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% ================ Part 1: Feature Normalization ================</span>

<span class="token comment">%% Clear and Close Figures</span>
clear <span class="token punctuation">;</span> close all<span class="token punctuation">;</span> clc

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Loading data ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Print out some data points</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'First 10 examples from the dataset: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' x = [%.0f %.0f], y = %.0f \n'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">% Scale features and set them to zero mean</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Normalizing Features ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span>X mu sigma<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">featureNormalize</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token comment">%% ================ Part 2: Gradient Descent ================</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: We have provided you with the following starter</span>
<span class="token comment">%               code that runs gradient descent with a particular</span>
<span class="token comment">%               learning rate (alpha). </span>
%
<span class="token comment">%               Your task is to first make sure that your functions - </span>
<span class="token comment">%               computeCost and gradientDescent already work with </span>
<span class="token comment">%               this starter code and support multiple variables.</span>
%
<span class="token comment">%               After that, try running gradient descent with </span>
<span class="token comment">%               different values of alpha and see which one gives</span>
<span class="token comment">%               you the best result.</span>
%
<span class="token comment">%               Finally, you should complete the code at the end</span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%
<span class="token comment">% Hint: By using the 'hold on' command, you can plot multiple</span>
<span class="token comment">%       graphs on the same figure.</span>
%
<span class="token comment">% Hint: At prediction, make sure you do the same feature normalization.</span>
%

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Running gradient descent ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Choose some alpha value</span>
alpha <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>
num_iters <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

<span class="token comment">% Init Theta and Run Gradient Descent </span>
theta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>theta<span class="token punctuation">,</span> J_history<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradientDescentMulti</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> num_iters<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Plot the convergence graph</span>
figure<span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">numel</span><span class="token punctuation">(</span>J_history<span class="token punctuation">)</span><span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> <span class="token string">'-b'</span><span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Number of iterations'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Cost J'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display gradient descent's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from gradient descent: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Recall that the first column of X is all-ones. Thus, it does</span>
<span class="token comment">% not need to be normalized.</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>
X_test1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

price<span class="token operator">=</span>X_test1<span class="token operator">*</span>theta<span class="token punctuation">;</span>

<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using gradient descent):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% ================ Part 3: Normal Equations ================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Solving with normal equations...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: The following code computes the closed form </span>
<span class="token comment">%               solution for linear regression using the normal</span>
<span class="token comment">%               equations. You should complete the code in </span>
<span class="token comment">%               normalEqn.m</span>
%
<span class="token comment">%               After doing so, you should complete this code </span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">csvread</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">% Calculate the parameters from the normal equation</span>
theta <span class="token operator">=</span> <span class="token function">normalEqn</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display normal equation's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from the normal equations: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>

X_test2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
price<span class="token operator">=</span>X_test2<span class="token operator">*</span>theta<span class="token punctuation">;</span>
<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using normal equations):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="featureNormalize-m"><a href="#featureNormalize-m" class="headerlink" title="featureNormalize.m"></a>featureNormalize.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% ================ Part 1: Feature Normalization ================</span>

<span class="token comment">%% Clear and Close Figures</span>
clear <span class="token punctuation">;</span> close all<span class="token punctuation">;</span> clc

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Loading data ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Print out some data points</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'First 10 examples from the dataset: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' x = [%.0f %.0f], y = %.0f \n'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">% Scale features and set them to zero mean</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Normalizing Features ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span>X mu sigma<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">featureNormalize</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token comment">%% ================ Part 2: Gradient Descent ================</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: We have provided you with the following starter</span>
<span class="token comment">%               code that runs gradient descent with a particular</span>
<span class="token comment">%               learning rate (alpha). </span>
%
<span class="token comment">%               Your task is to first make sure that your functions - </span>
<span class="token comment">%               computeCost and gradientDescent already work with </span>
<span class="token comment">%               this starter code and support multiple variables.</span>
%
<span class="token comment">%               After that, try running gradient descent with </span>
<span class="token comment">%               different values of alpha and see which one gives</span>
<span class="token comment">%               you the best result.</span>
%
<span class="token comment">%               Finally, you should complete the code at the end</span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%
<span class="token comment">% Hint: By using the 'hold on' command, you can plot multiple</span>
<span class="token comment">%       graphs on the same figure.</span>
%
<span class="token comment">% Hint: At prediction, make sure you do the same feature normalization.</span>
%

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Running gradient descent ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Choose some alpha value</span>
alpha <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>
num_iters <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

<span class="token comment">% Init Theta and Run Gradient Descent </span>
theta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>theta<span class="token punctuation">,</span> J_history<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradientDescentMulti</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> num_iters<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Plot the convergence graph</span>
figure<span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">numel</span><span class="token punctuation">(</span>J_history<span class="token punctuation">)</span><span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> <span class="token string">'-b'</span><span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Number of iterations'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Cost J'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display gradient descent's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from gradient descent: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Recall that the first column of X is all-ones. Thus, it does</span>
<span class="token comment">% not need to be normalized.</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>
X_test1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

price<span class="token operator">=</span>X_test1<span class="token operator">*</span>theta<span class="token punctuation">;</span>

<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using gradient descent):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% ================ Part 3: Normal Equations ================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Solving with normal equations...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: The following code computes the closed form </span>
<span class="token comment">%               solution for linear regression using the normal</span>
<span class="token comment">%               equations. You should complete the code in </span>
<span class="token comment">%               normalEqn.m</span>
%
<span class="token comment">%               After doing so, you should complete this code </span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">csvread</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">% Calculate the parameters from the normal equation</span>
theta <span class="token operator">=</span> <span class="token function">normalEqn</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display normal equation's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from the normal equations: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>

X_test2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
price<span class="token operator">=</span>X_test2<span class="token operator">*</span>theta<span class="token punctuation">;</span>
<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using normal equations):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="computeCostMulti-m"><a href="#computeCostMulti-m" class="headerlink" title="computeCostMulti.m"></a>computeCostMulti.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% ================ Part 1: Feature Normalization ================</span>

<span class="token comment">%% Clear and Close Figures</span>
clear <span class="token punctuation">;</span> close all<span class="token punctuation">;</span> clc

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Loading data ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Print out some data points</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'First 10 examples from the dataset: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' x = [%.0f %.0f], y = %.0f \n'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">% Scale features and set them to zero mean</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Normalizing Features ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span>X mu sigma<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">featureNormalize</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token comment">%% ================ Part 2: Gradient Descent ================</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: We have provided you with the following starter</span>
<span class="token comment">%               code that runs gradient descent with a particular</span>
<span class="token comment">%               learning rate (alpha). </span>
%
<span class="token comment">%               Your task is to first make sure that your functions - </span>
<span class="token comment">%               computeCost and gradientDescent already work with </span>
<span class="token comment">%               this starter code and support multiple variables.</span>
%
<span class="token comment">%               After that, try running gradient descent with </span>
<span class="token comment">%               different values of alpha and see which one gives</span>
<span class="token comment">%               you the best result.</span>
%
<span class="token comment">%               Finally, you should complete the code at the end</span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%
<span class="token comment">% Hint: By using the 'hold on' command, you can plot multiple</span>
<span class="token comment">%       graphs on the same figure.</span>
%
<span class="token comment">% Hint: At prediction, make sure you do the same feature normalization.</span>
%

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Running gradient descent ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Choose some alpha value</span>
alpha <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>
num_iters <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

<span class="token comment">% Init Theta and Run Gradient Descent </span>
theta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>theta<span class="token punctuation">,</span> J_history<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradientDescentMulti</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> num_iters<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Plot the convergence graph</span>
figure<span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">numel</span><span class="token punctuation">(</span>J_history<span class="token punctuation">)</span><span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> <span class="token string">'-b'</span><span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Number of iterations'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Cost J'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display gradient descent's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from gradient descent: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Recall that the first column of X is all-ones. Thus, it does</span>
<span class="token comment">% not need to be normalized.</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>
X_test1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

price<span class="token operator">=</span>X_test1<span class="token operator">*</span>theta<span class="token punctuation">;</span>

<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using gradient descent):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% ================ Part 3: Normal Equations ================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Solving with normal equations...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: The following code computes the closed form </span>
<span class="token comment">%               solution for linear regression using the normal</span>
<span class="token comment">%               equations. You should complete the code in </span>
<span class="token comment">%               normalEqn.m</span>
%
<span class="token comment">%               After doing so, you should complete this code </span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">csvread</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">% Calculate the parameters from the normal equation</span>
theta <span class="token operator">=</span> <span class="token function">normalEqn</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display normal equation's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from the normal equations: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>

X_test2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
price<span class="token operator">=</span>X_test2<span class="token operator">*</span>theta<span class="token punctuation">;</span>
<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using normal equations):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="gradientDescentMulti-m"><a href="#gradientDescentMulti-m" class="headerlink" title="gradientDescentMulti.m"></a>gradientDescentMulti.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% ================ Part 1: Feature Normalization ================</span>

<span class="token comment">%% Clear and Close Figures</span>
clear <span class="token punctuation">;</span> close all<span class="token punctuation">;</span> clc

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Loading data ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Print out some data points</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'First 10 examples from the dataset: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' x = [%.0f %.0f], y = %.0f \n'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">% Scale features and set them to zero mean</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Normalizing Features ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span>X mu sigma<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">featureNormalize</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token comment">%% ================ Part 2: Gradient Descent ================</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: We have provided you with the following starter</span>
<span class="token comment">%               code that runs gradient descent with a particular</span>
<span class="token comment">%               learning rate (alpha). </span>
%
<span class="token comment">%               Your task is to first make sure that your functions - </span>
<span class="token comment">%               computeCost and gradientDescent already work with </span>
<span class="token comment">%               this starter code and support multiple variables.</span>
%
<span class="token comment">%               After that, try running gradient descent with </span>
<span class="token comment">%               different values of alpha and see which one gives</span>
<span class="token comment">%               you the best result.</span>
%
<span class="token comment">%               Finally, you should complete the code at the end</span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%
<span class="token comment">% Hint: By using the 'hold on' command, you can plot multiple</span>
<span class="token comment">%       graphs on the same figure.</span>
%
<span class="token comment">% Hint: At prediction, make sure you do the same feature normalization.</span>
%

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Running gradient descent ...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Choose some alpha value</span>
alpha <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>
num_iters <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

<span class="token comment">% Init Theta and Run Gradient Descent </span>
theta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>theta<span class="token punctuation">,</span> J_history<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradientDescentMulti</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> num_iters<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Plot the convergence graph</span>
figure<span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">numel</span><span class="token punctuation">(</span>J_history<span class="token punctuation">)</span><span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> <span class="token string">'-b'</span><span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Number of iterations'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Cost J'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display gradient descent's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from gradient descent: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Recall that the first column of X is all-ones. Thus, it does</span>
<span class="token comment">% not need to be normalized.</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>
X_test1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

price<span class="token operator">=</span>X_test1<span class="token operator">*</span>theta<span class="token punctuation">;</span>

<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using gradient descent):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Program paused. Press enter to continue.\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pause</span><span class="token punctuation">;</span>

<span class="token comment">%% ================ Part 3: Normal Equations ================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Solving with normal equations...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: The following code computes the closed form </span>
<span class="token comment">%               solution for linear regression using the normal</span>
<span class="token comment">%               equations. You should complete the code in </span>
<span class="token comment">%               normalEqn.m</span>
%
<span class="token comment">%               After doing so, you should complete this code </span>
<span class="token comment">%               to predict the price of a 1650 sq-ft, 3 br house.</span>
%

<span class="token comment">%% Load Data</span>
data <span class="token operator">=</span> <span class="token function">csvread</span><span class="token punctuation">(</span><span class="token string">'ex1data2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Add intercept term to X</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> X<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">% Calculate the parameters from the normal equation</span>
theta <span class="token operator">=</span> <span class="token function">normalEqn</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% Display normal equation's result</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'Theta computed from the normal equations: \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">' %f \n'</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">% Estimate the price of a 1650 sq-ft, 3 br house</span>
<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">% You should change this</span>

X_test2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1650</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token function">mu</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sigma</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
price<span class="token operator">=</span>X_test2<span class="token operator">*</span>theta<span class="token punctuation">;</span>
<span class="token comment">% ============================================================</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Predicted price of a 1650 sq-ft, 3 br house '</span> <span class="token punctuation">...</span>
         <span class="token string">'(using normal equations):\n $%f\n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="normalEqn-m"><a href="#normalEqn-m" class="headerlink" title="normalEqn.m"></a>normalEqn.m</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span>theta<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">normalEqn</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token comment">%NORMALEQN Computes the closed-form solution to linear regression </span>
<span class="token comment">%   NORMALEQN(X,y) computes the closed-form solution to linear </span>
<span class="token comment">%   regression using the normal equations.</span>

theta <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% ====================== YOUR CODE HERE ======================</span>
<span class="token comment">% Instructions: Complete the code to compute the closed form solution</span>
<span class="token comment">%               to linear regression and put the result in theta.</span>
%

<span class="token comment">% ---------------------- Sample Solution ----------------------</span>



theta <span class="token operator">=</span> <span class="token function">pinv</span><span class="token punctuation">(</span><span class="token function">transpose</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span>X<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">transpose</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span>y<span class="token punctuation">;</span>

<span class="token comment">% -------------------------------------------------------------</span>


<span class="token comment">% ============================================================</span>

<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> <img src="/img/ML/ex1/mul.png" alt="mul"><br> <img src="/img/ML/ex1/suc2.png" alt="suc2"><br><span id="more"></span><br>真的是我第一次非常非常认真的，因为有一种嵌入灵魂的动容。我无数次劝我自己放弃，安心学习，可惜我做不到啊。</p>
]]></content>
  </entry>
  <entry>
    <title>ML</title>
    <url>/ML/</url>
    <content><![CDATA[<p><img src="/img/DeepLearning.jpg" alt="DL"></p>
<p>Free Download:</p>
<p>PRML:<br><a href="https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf">Pattern Recognition and Machine Learning</a></p>
<p>DeepLearning:<br><a href="https://github.com/janishar/mit-deep-learning-book-pdf/blob/master/complete-book-bookmarked-pdf/deeplearningbook.pdf">Deep Learning</a><br><a href="https://www.deeplearningbook.org/">Web</a></p>
]]></content>
  </entry>
  <entry>
    <title>MM_HW_3</title>
    <url>/MM-HW-3/</url>
    <content><![CDATA[<p>用LaTeX写作业有一种爽感<br><img src="/img/MM3.png" alt="MM3_1"><br><img src="/img/MM33.png" alt="MM3_2"><br><span id="more"></span></p>
<h3 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass[12pt]&#123;article&#125;
\title&#123;AP Micro \&amp; Macro Economics Homework  3&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;October 21, 2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
\usepackage&#123;fontspec&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;

%\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
%\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
%\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]

\setmainfont&#123;Garamond&#125;



\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;37&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;37&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;37&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;37&#125;&#125;&#125;
&#125;

\begin&#123;document&#125;
\maketitle

\section&#123;&#125;

\subsection&#123;i.&#125;
By definition and graphing, we could fathom out that the producer pays the whole tax. Economically intuitively speaking, the more inelastic one side is, the more tax one side will settle. Like if you and your friends go out to have dinner. Only one person is going to pay the bill. There is no doubt that the person who least cares about price will pay the bill. (If they do not know AA)

\subsection&#123;ii.&#125;

No DWL. Graphically, when the supply curve becomes more and more perfectly inelastic, the area of DWL gets closer and closer to zero. Economically intuitively speaking, there is no &quot;can happen but not happen&quot; things. Hence there is no DWL.

\subsection&#123;iii.&#125;
Interest-based products. For instance, I am a sculpture fanatic, and I spend my whole spare time making sculptures. I don&#39;t want to keep my works, and then I sell them. But I never care how much my sculpture can sell. I just love making them. 
\subsection&#123;iv.&#125;
The producer. Because producers are less sensitive(more inelastic) of price. 
\subsection&#123;v.&#125;
It has DWL. The amount of DWL is the triangle.(Sorry the graph is on the next page......)
\begin&#123;figure&#125;[ht]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;1.png&#125;
   \end&#123;figure&#125;   
\subsection&#123;vi.&#125;
1. The price of one kind of necessity in local market. 2. President&#39;s political preference(But the independent variable is the difference president).


\section&#123;&#125;

\subsection&#123;i.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Q&#125;&#123;Q&#125;&#125;&#123;\frac&#123;\Delta P&#125;&#123;P&#125;&#125;&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta P&#125;&#x3D;\frac&#123;30\%&#125;&#123;20\%&#125;&#x3D;1.5$$
e&gt;1
\\elastic
\subsection&#123;ii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;1200-1000&#125;&#123;\frac&#123;1200+1000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;2.4-2&#125;&#123;\frac&#123;2.4+2&#125;&#123;2&#125;&#125;&#125;&#x3D;1$$
unit elastic
\subsection&#123;iii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Qa&#125;&#123;Qa&#125;&#125;&#123;\frac&#123;\Delta Pb&#125;&#123;Pb&#125;&#125;&#x3D;\frac&#123;\%\Delta Qa&#125;&#123;\%\Delta Pb&#125;&#x3D;\frac&#123;25\%&#125;&#123;50\%&#125;&#x3D;0.5$$
e&gt;0\\
substitute
\subsection&#123;iv.&#125;
$$elasticity&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta Income&#125;&#x3D;\frac&#123;\frac&#123;1800-2000&#125;&#123;\frac&#123;2000+1800&#125;&#123;2&#125;&#125;&#125;&#123;20\%&#125;&#x3D;-0.526$$
e&lt;0\\
inferior

\subsection&#123;v.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;300000-220000&#125;&#123;\frac&#123;300000+220000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;3-2&#125;&#123;\frac&#123;3+2&#125;&#123;2&#125;&#125;&#125;&#x3D;0.769$$
e&lt;1\\
inelastic
\subsection&#123;vi.&#125;
Increase.
Because inelastic indicates the $\% \Delta Q&lt; \% \Delta P.$ Then after the price increase, the total revenue will increase because it equals&#x3D;P*Q.


\section&#123;&#125;
Absolutely not. That lose doesn&#39;t brought by trade. Trade only exist when that trade is reciprocal. We can&#39;t says the trade deficit is &quot;lose&quot;. Besides, if a country issue a lot of currency in to make their money devalued in order to have a higher export. We can&#39;t say they &quot;win&quot; money. Likewise, we can&#39;t just care about the numbers in trade without consider anything else.

\section&#123;&#125;


\subsection&#123;i.&#125;
No comparative advantages.\\
Import.\\
(Simply thinking)
\subsection&#123;ii.&#125;
From surplus&#39; perspective, the consumer will win. The gain is larger. Because the increased consumer surplus is larger than the decreased producer surplus. Graphically, the increased consumer surplus: b+c, is larger than the decreased producer surplus: b.
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;im.png&#125;
   \end&#123;figure&#125;  
\subsection&#123;iii.&#125;
The cosumer will still win. But the society(or the market) will relatively lose(compare to the situation without tariff). And the gov also win(if they just care about revenue).


\subsection&#123;iv.&#125;
see
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;imm.png&#125;
   \end&#123;figure&#125; 


\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><p><img src="/img/m1.png" alt="m1"><br><img src="/img/m2.png" alt="m2"><br><img src="/img/m3.png" alt="m3"><br><img src="/img/m4.png" alt="m4"><br><img src="/img/m5.png" alt="m5"></p>
]]></content>
  </entry>
  <entry>
    <title>OIO001</title>
    <url>/OIO001/</url>
    <content><![CDATA[<p>I am afraid of being a simp of her, not because I don’t love her but because I love her so deeply that I can’t afford the cost of losing the unparalleledly and weakly existing relationship with her. </p>
]]></content>
  </entry>
  <entry>
    <title>Magic_Square</title>
    <url>/Magic-Square/</url>
    <content><![CDATA[<h4 id="APCSA-Lab"><a href="#APCSA-Lab" class="headerlink" title="APCSA Lab"></a>APCSA Lab</h4><h5 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h5><ol>
<li>Square</li>
<li>SquareTest</li>
</ol>
<h5 id="Square"><a href="#Square" class="headerlink" title="Square"></a>Square</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> square<span class="token punctuation">;</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//create new square of given size</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        square<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//return the sum of the values in the given row</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sumR<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sumR<span class="token operator">+=</span>square<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sumR<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//return the sum of the values in the given column</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumCol</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sumC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sumC<span class="token operator">+=</span>square<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sumC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//return the sum of the values in the main diagonal</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumMainDiag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sumD1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sumD1<span class="token operator">+=</span>square<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sumD1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//return the sum of the values in the other ("reverse") diagonal</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumOtherDiag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sumD2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sumD2<span class="token operator">+=</span>square<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>square<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sumD2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//return true if the square is magic (all rows, cols, and diags have</span>
    <span class="token comment">//same sum), false otherwise</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>square<span class="token punctuation">.</span>length<span class="token operator">*</span>square<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            test<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sumRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
            test<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sumCol</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>   
        test<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sumMainDiag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        test<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sumOtherDiag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag<span class="token operator">=</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//read info into the square from the input stream associated with the </span>
    <span class="token comment">//Scanner parameter</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readSquare</span><span class="token punctuation">(</span><span class="token class-name">Scanner</span> scan<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                square<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//--------------------------------------</span>
    <span class="token comment">//print the contents of the square, neatly formatted</span>
    <span class="token comment">//--------------------------------------</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>square<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>square<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="SquareTest"><a href="#SquareTest" class="headerlink" title="SquareTest"></a>SquareTest</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SquareTest</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:/Users/15011/Desktop/CSA/In_Class/Array/magicData.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    	<span class="token keyword">int</span> size <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Square</span> sq1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sq1<span class="token punctuation">.</span><span class="token function">readSquare</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n******** Square "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" ********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    sq1<span class="token punctuation">.</span><span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rows "</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>sq1<span class="token punctuation">.</span><span class="token function">sumRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"columns "</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>sq1<span class="token punctuation">.</span><span class="token function">sumCol</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main diagonal: "</span><span class="token operator">+</span>sq1<span class="token punctuation">.</span><span class="token function">sumMainDiag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"other diagonal: "</span><span class="token operator">+</span>sq1<span class="token punctuation">.</span><span class="token function">sumOtherDiag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sq1<span class="token punctuation">.</span><span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"It is a magic square"</span><span class="token operator">:</span><span class="token string">"It isn't a magic square."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            size <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>OPCV000</title>
    <url>/OPCV000/</url>
    <content><![CDATA[<h2 id="Introduction-to-OpenCV"><a href="#Introduction-to-OpenCV" class="headerlink" title="Introduction to OpenCV"></a>Introduction to OpenCV</h2><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><ul>
<li>Introduction</li>
<li>Code</li>
<li>Demo</li>
</ul>
<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>An interesting “Hello World” in OpenCV. It invokes the camera and recognizes hands. Then, it uses the coordinates of these nodes in hands to draw the real time hands frameworks.</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>Here comes the code:<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> mediapipe <span class="token keyword">as</span> mp



cap<span class="token operator">=</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

mpHands<span class="token operator">=</span> mp<span class="token punctuation">.</span>solutions<span class="token punctuation">.</span>hands
hands <span class="token operator">=</span> mpHands<span class="token punctuation">.</span>Hands<span class="token punctuation">(</span><span class="token punctuation">)</span>

mpDraw<span class="token operator">=</span> mp<span class="token punctuation">.</span>solutions<span class="token punctuation">.</span>drawing_utils

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    ret<span class="token punctuation">,</span> img <span class="token operator">=</span>cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> ret<span class="token punctuation">:</span> 
        imgRGB<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>
        result<span class="token operator">=</span>hands<span class="token punctuation">.</span>process<span class="token punctuation">(</span>imgRGB<span class="token punctuation">)</span>
        <span class="token comment">#print(result.multi_hand_landmarks)</span>
        <span class="token keyword">if</span> result<span class="token punctuation">.</span>multi_hand_landmarks<span class="token punctuation">:</span>
            <span class="token keyword">for</span> handLms <span class="token keyword">in</span> result<span class="token punctuation">.</span>multi_hand_landmarks<span class="token punctuation">:</span>
                mpDraw<span class="token punctuation">.</span>draw_landmarks<span class="token punctuation">(</span>img<span class="token punctuation">,</span>handLms<span class="token punctuation">,</span>mpHands<span class="token punctuation">.</span>HAND_CONNECTIONS<span class="token punctuation">)</span>
        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p><a href="https://www.bilibili.com/video/BV1w44y1j7y3">https://www.bilibili.com/video/BV1w44y1j7y3</a></p>
]]></content>
  </entry>
  <entry>
    <title>Stokes_Theorem</title>
    <url>/Stokes-Theorem/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In my second semester of High School Junior year, when we were studying vector calculus @Calculus 3,  our teacher gave us an assignment: proof of Stokes formula. CALCULUS EARLY TRANSCENDENTALS EIGHTH EDITION JAMES STEWART (our Calculus3 textbook) only has a special form of stokes’ theorem proof. Thus, I looked up the prood at old Chinese Text Book. It is a pity that our high school calculus education with American calculus education are quite different compared to Chinese’s. I searched on zhihu, Bilibili and other public platforms, but failed to find any suitable results. Luckily, I finally figure it out when I went back home during the epidemic.</p>
<h3 id="Stoke’s-Theorem"><a href="#Stoke’s-Theorem" class="headerlink" title="Stoke’s Theorem"></a>Stoke’s Theorem</h3><p>For surface S in $R^3$ space is an oriented surface in $x,y,z$ coordinate with boundary $\partial S$. Let $R$ be abounded, open region in $s, t$ plane with smooth boundary $\partial R$ . Suppose that $F$ is a continuously differentiable vector field. $\vec{r}$ is a smooth parametrization that maps $R$ to $S$, and $\partial R$ to $\partial S$. Then</p>
<script type="math/tex; mode=display">
\iint_S{curl\,\,\vec{F}\,\,·\,\,d\vec{S}}=\iint_S{\left( \nabla \times \vec{F} \right) \,\,·\,\,\vec{n}\,\,dS}=\int_{\partial S}{\vec{F}\,\,·\,\,\vec{T}\,\,ds}=\,\,\int_{\partial S}{\vec{F}\,\,·\,\,d\vec{r}}</script><p><img src="/img/stks.png" alt="stks"></p>
<h3 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h3><p>Let</p>
<script type="math/tex; mode=display">
\vec{r}\left( s,t \right) =\left[ \begin{array}{c}
    x\left( s,t \right)\\
    y\left( s,t \right)\\
    z\left( s,t \right)\\
\end{array} \right] \,\,: R\rightarrow S.</script><p>Then.</p>
<script type="math/tex; mode=display">
d\vec{r}\mid_{\partial R}^{}\,\,=\left[ \begin{matrix}
    \frac{\partial x}{\partial s}&        \frac{\partial x}{\partial t}\\
    \frac{\partial y}{\partial s}&        \frac{\partial y}{\partial t}\\
    \frac{\partial z}{\partial s}&        \frac{\partial z}{\partial t}\\
\end{matrix} \right] \left[ \begin{array}{c}
    ds\\
    dt\\
\end{array} \right] \,\,=\left[ \begin{array}{c}
    \frac{\partial x}{\partial s}ds+\frac{\partial x}{\partial t}dt\\
    \frac{\partial y}{\partial s}ds+\frac{\partial y}{\partial t}dt\\
    \frac{\partial z}{\partial s}ds+\frac{\partial z}{\partial t}dt\\
\end{array} \right] \,\,=\left[ \begin{array}{c}
    \frac{\partial x}{\partial s}\\
    \frac{\partial y}{\partial s}\\
    \frac{\partial z}{\partial s}\\
\end{array} \right] ds+\left[ \begin{array}{c}
    \frac{\partial x}{\partial t}\\
    \frac{\partial y}{\partial t}\\
    \frac{\partial z}{\partial t}\\
\end{array} \right] dt\,\,=\frac{\partial \vec{r}}{\partial s}ds+\frac{\partial \vec{r}}{\partial t}dt</script><p>Hence.</p>
<script type="math/tex; mode=display">
\int_{\partial S}{\vec{F}·}d\vec{r}=\int_{\partial S}{\left( \vec{F}·\frac{\partial \vec{r}}{\partial s}ds+\vec{F}·\frac{\partial \vec{r}}{\partial s} \right)}</script><p>We define a 2-dimensional vector field $G=(G1,G2)$ on the s,t, plane by</p>
<script type="math/tex; mode=display">
G_1=\vec{F}\,\,·\,\,\frac{\partial \vec{r}}{\partial s}\,\,  and\,\,  G_2=\vec{F}\,\,·\,\,\frac{\partial \vec{r}}{\partial t}</script><p>Therefore, we put G into the original line integral</p>
<script type="math/tex; mode=display">
\int_{\partial S}{\vec{F}\,\,·\,\,d\vec{r}=}\int_{\partial R}{\left( G_1ds+G_2dt \right) =\int_R{\begin{array}{c}
    \left( \frac{\partial G_2}{\partial s}-\frac{\partial G_1}{\partial t} \right) dsdt\,\,,\\
\end{array}}\,\,}</script><script type="math/tex; mode=display">
\int_{\partial S}{\vec{F}\,\,·\,\,d\vec{r}=}\int_{\partial R}{\left( G_1ds+G_2dt \right) \,\,}</script><p>On the other hand. </p>
<script type="math/tex; mode=display">
\iint_S{curl\,\,\vec{F}\,\,·\,\,d\vec{S}\,\,=\,\,\iint_R{curl\,\,\vec{F}\mid_{\vec{r}}^{}·\frac{\partial \vec{r}}{\partial s}\times \frac{\partial \vec{r}}{\partial t}dsdt}}</script><p>We expand it, get</p>
<script type="math/tex; mode=display">
curl\,\,\vec{F}\mid_{\vec{r}}^{}\cdot \frac{\partial \vec{r}}{\partial s}\times \frac{\partial \vec{r}}{\partial t}\,\,=\,\,\left| \begin{matrix}
    \frac{\partial F_3}{\partial y}-\frac{\partial F_2}{\partial z}&        \frac{\partial F_1}{\partial z}-\frac{\partial F_3}{\partial x}&        \frac{\partial F_2}{\partial x}-\frac{\partial F_1}{\partial y}\\
    \frac{\partial x}{\partial s}&        \frac{\partial y}{\partial s}&        \frac{\partial z}{\partial s}\\
    \frac{\partial x}{\partial t}&        \frac{\partial y}{\partial t}&        \frac{\partial z}{\partial t}\\
\end{matrix} \right|</script><script type="math/tex; mode=display">
=\frac{\partial \vec{F}}{\partial s}·\frac{\partial \vec{r}}{\partial t}-\frac{\partial \vec{F}}{\partial t}·\frac{\partial \vec{r}}{\partial s}\,\,=\frac{\partial G_2}{\partial s}-\frac{\partial G_1}{\partial t}</script><p>Hence.</p>
<script type="math/tex; mode=display">
\int_R{curl\,\,F\mid_{\vec{r}}^{}\cdot \frac{\partial \vec{r}}{\partial s}}\times \frac{\partial \vec{r}}{\partial t}\,\,dsdt\,\,=\,\,\int_R{\begin{array}{c}
    \left( \frac{\partial G_2}{\partial s}-\frac{\partial G_1}{\partial t} \right) dsdt\,\,\\
\end{array}}</script><p>For the line integral part,we have</p>
<script type="math/tex; mode=display">
\int_{\partial S}{\vec{F}\,\,·\,\,d\vec{r}=}\int_{\partial R}{\begin{array}{c}
    \left( G_1ds+G_2dt \right) \,\,\\
\end{array}}</script><p>Use Green’s Theorem, we know</p>
<script type="math/tex; mode=display">
\int_{\partial R}{\begin{array}{c}
    \left( G_1ds+G_2dt \right)\\
\end{array}}=\int_R{\begin{array}{c}
    \left( \frac{\partial G_2}{\partial s}-\frac{\partial G_1}{\partial t} \right) dsdt\,\,,\\
\end{array}}</script><p>So, we can conclude that </p>
<script type="math/tex; mode=display">
\int_{\partial S}{\vec{F}·}d\vec{r}=\int_R{\begin{array}{c}
    \left( \frac{\partial G_2}{\partial s}-\frac{\partial G_1}{\partial t} \right) dsdt=\int_R{curl\,\,F\mid_{\vec{r}}^{}\cdot \frac{\partial \vec{r}}{\partial s}}\times \frac{\partial \vec{r}}{\partial t}\\
\end{array}}dsdt=\iint_S{curl\,\,F\,\,·\,\,d\vec{S}}</script><p>Thus, we finished our proof of Stokes’ Theorem. </p>
<span id="more"></span>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] Fichtengoltz, G. M. (1959). Course on the Differential and Integral.</p>
<p>[2] Stewart, J., Clegg, D. K., &amp; Watson, S. (2020).Calculus: early transcendentals. Cengage Learning.</p>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p>You can browse my other articles at my zhihu account  :  <a href="https://zhuanlan.zhihu.com/p/543973521">https://zhuanlan.zhihu.com/p/543973521</a></p>
]]></content>
  </entry>
  <entry>
    <title>affair</title>
    <url>/affair/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ann</title>
    <url>/ann/</url>
    <content><![CDATA[<p>One APCSA FRQ</p>
<h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><ul>
<li>Class HiddenWord</li>
<li>Class Driver</li>
</ul>
<h4 id="Class-HiddenWord"><a href="#Class-HiddenWord" class="headerlink" title="Class HiddenWord"></a>Class HiddenWord</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiddenWord</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> word<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">HiddenWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        word<span class="token operator">=</span>w<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHint</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> r<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               r<span class="token operator">=</span>r<span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                r<span class="token operator">+=</span>flag<span class="token operator">?</span><span class="token string">"+"</span><span class="token operator">:</span><span class="token string">"*"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Class-Driver"><a href="#Class-Driver" class="headerlink" title="Class Driver"></a>Class Driver</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> driver<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> h<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HiddenWord</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HiddenWord</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> g<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getHint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getHint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>THINK001</title>
    <url>/THINK001/</url>
    <content><![CDATA[<p>观Pioneer年度最佳论文们有感。<br>在美本申请领域，人们看起来的强度（指除了GPA以外的，例如标化，水竞赛，活动等等），其实并不像高考一样，纯和你的智力与努力程度成正比。美本申请的这些东西，其实更取决于起步时间。就比如说高一开学的时候，有的人托福115，有的人还没开始学，像托福，ACT，SAT，高中生的那些所谓的”竞赛“，其实并不需要智力和方法，就是看学习时间的长短和积累。而当起步晚的学生们在奋力学标化的时候，那些起步早的人，就可以拿出时间去搞活动，搞竞赛，搞”科研“去了。至于美高学生，那就是起步更早的，所以就，从美本申请的角度来看更成功。<br>所以我想对现在迷茫和焦虑的人说，你虽然感觉自己没有有一些人强，并不是因为你的能力不行，而是你的起步时间太晚了，所以不要担心，美本其实都差不多，本科大家都是一样的，好好学习，最后体现的才是大家真实的实力。</p>
]]></content>
  </entry>
  <entry>
    <title>RE016</title>
    <url>/RE016/</url>
    <content><![CDATA[<p><img src="/img/chaseTheMoon.jpg" alt="CM"><br><span id="more"></span></p>
<h2 id="我的十六岁回顾与总结"><a href="#我的十六岁回顾与总结" class="headerlink" title="我的十六岁回顾与总结"></a>我的十六岁回顾与总结</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>小的回顾</li>
<li>大的总结</li>
</ul>
<h4 id="小的回顾"><a href="#小的回顾" class="headerlink" title="小的回顾"></a>小的回顾</h4><p>总的来说，这一年过的马马虎虎。 一月份的期末考试留下了一个遗憾，二月自己在家的懒惰、缺乏积累和自大造成了AMC的失败。之后寒假去看胃病，盲目信的中医也没治好。高一下开始上建模同时找到了（忘记了是高一上结束还是高一下开始的了）向日葵，可以说是从内部有许多的相似的地方，对话也比较投机。后来AP考砸了，事实证明要多准备，托福也没有如尝所愿，好在GPA比摆烂的高一稍微好了一点，建模也领悟和学习到了一些新的东西，和向日葵也有了很多的交流。IEO去参与了一波，感受了一下昆山的炎热和经济学的花哨。暑假马马虎虎的学习ACT建模AMC，自学了网络安全入门，和网站搭建，花了一周自己钻研给自己和经济社团搭建了一个网站。有了自己github账号并且搞一些东西。自己的特大兴趣之一：航天，加入了ASPT航天科普小组。后来就是方圆经济社和StepInto的事情。开学后，更好的老师，更个性化的选课倒是还是很适应。参加了第一次数学建模比赛：CUMCM，提交论文就算成功。然后是HiMCM，然后AMC。这些事情都一一结束了。</p>
<h4 id="大的总结"><a href="#大的总结" class="headerlink" title="大的总结"></a>大的总结</h4><p>虽然但是，这一年首先健健康康的活下来了，而且在很多地方也有新的感悟和理解。比如说专业的选择上从一开始的理论物理，到金融，到经济，再到计算机，再到数学，再到现在的统计与机器学习。了解到了CMU这个学校。还有知道了一点点人际的道理。还有更重要的，就是要学会沉淀和积累。</p>
]]></content>
  </entry>
  <entry>
    <title>correction1</title>
    <url>/correction1/</url>
    <content><![CDATA[<p>一个还不错的自己写的tex 模板<br><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">

\documentclass[12pt]&#123;article&#125;
\title&#123;AP Micro \&amp; Macro Economics Homework  3&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;October 21, 2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
\usepackage&#123;fontspec&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;

%\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
%\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
%\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]

\setmainfont&#123;Garamond&#125;



\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;37&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;37&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;37&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;37&#125;&#125;&#125;
&#125;

\begin&#123;document&#125;
\maketitle

\section&#123;&#125;

\subsection&#123;i.&#125;
By definition and graphing, we could fathom out that the producer pays the whole tax. Economically intuitively speaking, the more inelastic one side is, the more tax one side will settle. Like if you and your friends go out to have dinner. Only one person is going to pay the bill. There is no doubt that the person who least cares about price will pay the bill. (If they do not know AA)

\subsection&#123;ii.&#125;

No DWL. Graphically, when the supply curve becomes more and more perfectly inelastic, the area of DWL gets closer and closer to zero. Economically intuitively speaking, there is no &quot;can happen but not happen&quot; things. Hence there is no DWL.

\subsection&#123;iii.&#125;
Interest-based products. For instance, I am a sculpture fanatic, and I spend my whole spare time making sculptures. I don&#39;t want to keep my works, and then I sell them. But I never care how much my sculpture can sell. I just love making them. 
\subsection&#123;iv.&#125;
The producer. Because producers are less sensitive(more inelastic) of price. 
\subsection&#123;v.&#125;
It has DWL. The amount of DWL is the triangle.(Sorry the graph is on the next page......)
\begin&#123;figure&#125;[ht]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;1.png&#125;
   \end&#123;figure&#125;   
\subsection&#123;vi.&#125;
1. The price of one kind of necessity in local market. 2. President&#39;s political preference(But the independent variable is the difference president).


\section&#123;&#125;

\subsection&#123;i.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Q&#125;&#123;Q&#125;&#125;&#123;\frac&#123;\Delta P&#125;&#123;P&#125;&#125;&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta P&#125;&#x3D;\frac&#123;30\%&#125;&#123;20\%&#125;&#x3D;1.5$$
e&gt;1
\\elastic
\subsection&#123;ii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;1200-1000&#125;&#123;\frac&#123;1200+1000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;2.4-2&#125;&#123;\frac&#123;2.4+2&#125;&#123;2&#125;&#125;&#125;&#x3D;1$$
unit elastic
\subsection&#123;iii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Qa&#125;&#123;Qa&#125;&#125;&#123;\frac&#123;\Delta Pb&#125;&#123;Pb&#125;&#125;&#x3D;\frac&#123;\%\Delta Qa&#125;&#123;\%\Delta Pb&#125;&#x3D;\frac&#123;25\%&#125;&#123;50\%&#125;&#x3D;0.5$$
e&gt;0\\
substitute
\subsection&#123;iv.&#125;
$$elasticity&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta Income&#125;&#x3D;\frac&#123;\frac&#123;1800-2000&#125;&#123;\frac&#123;2000+1800&#125;&#123;2&#125;&#125;&#125;&#123;20\%&#125;&#x3D;-0.526$$
e&lt;0\\
inferior

\subsection&#123;v.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;300000-220000&#125;&#123;\frac&#123;300000+220000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;3-2&#125;&#123;\frac&#123;3+2&#125;&#123;2&#125;&#125;&#125;&#x3D;0.769$$
e&lt;1\\
inelastic
\subsection&#123;vi.&#125;
Increase.
Because inelastic indicates the $\% \Delta Q&lt; \% \Delta P.$ Then after the price increase, the total revenue will increase because it equals&#x3D;P*Q.


\section&#123;&#125;
Absolutely not. That lose doesn&#39;t brought by trade. Trade only exist when that trade is reciprocal. We can&#39;t says the trade deficit is &quot;lose&quot;. Besides, if a country issue a lot of currency in to make their money devalued in order to have a higher export. We can&#39;t say they &quot;win&quot; money. Likewise, we can&#39;t just care about the numbers in trade without consider anything else.

\section&#123;&#125;


\subsection&#123;i.&#125;
No comparative advantages.\\
Import.\\
(Simply thinking)
\subsection&#123;ii.&#125;
From surplus&#39; perspective, the consumer will win. The gain is larger. Because the increased consumer surplus is larger than the decreased producer surplus. Graphically, the increased consumer surplus: b+c, is larger than the decreased producer surplus: b.
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;im.png&#125;
   \end&#123;figure&#125;  
\subsection&#123;iii.&#125;
The cosumer will still win. But the society(or the market) will relatively lose(compare to the situation without tariff). And the gov also win(if they just care about revenue).


\subsection&#123;iv.&#125;
see
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;imm.png&#125;
   \end&#123;figure&#125; 


\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>hello world</p>
]]></content>
  </entry>
  <entry>
    <title>love0</title>
    <url>/love0/</url>
    <content><![CDATA[<p>最近经常刷到一个关于爱情的辩题:</p>
<p>“到底是从未在一起更遗憾;还是最终没有在一起更遗憾。”</p>
<p>我想以下这段文字是属于这个辩题最贴切的答案:</p>
<p>“如果知道爱情没有结局，给你机会重新来过，你会选择重蹈覆辙吗？ 会 ，且一定会。正因为那段有她陪伴的时光，如今我不再偏执，不再任性，不再孩子气。在那段彼此为伴的日子里， 我们炙热善良，渴望的同时也在做着最浪漫的事情——一起慢慢变老，哪怕我庸庸碌碌太平常。我的意思是，金风玉露一相逢，便胜却人间无数，感謝她的出现。可是啊，哪份满分试卷在作答前不是空白的呢？</p>
<p>我承认定数，这世间风物辽阔，四海、四季，以及那冗杂的感情，各有旨趣。我将永远怀念、感谢过去的事情， 它改变了我的幼稚，填补了我的人生， 让我学会了与念妥协，周全日子。</p>
<p>感谢生活，有剥夺亦有馈赠， 可惜我并没有足够幸运 ，它仅赐我同行的缘分，却吝啬一起到老的勇气，可难道如果提前知道结局就会拒绝相遇吗？</p>
<p>我想，不会的。</p>
<p>什么是结局？天作之合结良缘是结局？永结同心成佳偶是结局？生娃带娃是结局？并骨同栖是结局？都不是，都他妈不是！那到底什么才是真理？什么才是结局？之死靡渝的相爱才是，相爱才是！是开始，也是结局。</p>
<p>如果这辈子就是我们上辈子说的下辈子，我还是会想在没有天气预报的雨天牵着你奔跑 ;还是会想在阳光灿烂的日子看着你傻笑;还是会想上一秒红着脸在争吵，下一秒转身就能和好;还是会想在能看到的未来里，有你。</p>
<p>欲买桂花同载酒，终不似，少年游。如果风吹八千里仍有归期;如果我还爱你;如果没有如果…</p>
<p>如果这就是爱情，I love you, I’m crazy. ”</p>
<p><img src="/img/pretender.jpg" alt="love0"><br>文章内容来源于知乎专栏: <a href="https://zhuanlan.zhihu.com/p/436063727">https://zhuanlan.zhihu.com/p/436063727</a><br>copyright: mignon@金曜日東ク84b<br><a href="https://www.pixiv.net/en/artworks/85601747">https://www.pixiv.net/en/artworks/85601747</a></p>
]]></content>
  </entry>
  <entry>
    <title>determinant</title>
    <url>/determinant/</url>
    <content><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>This is a program designed for finding the determinant of any matrix.<br>It uses depth-first search to find the Laplace expansion form of each matrix. </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">mx</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
	<span class="token keyword">int</span> qu<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">det</span><span class="token punctuation">(</span>mx U<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span>m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span>m<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> mid<span class="token punctuation">;</span>
		mid<span class="token operator">=</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span>m<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> allmid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>U<span class="token punctuation">.</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			mx subU<span class="token punctuation">;</span>
			subU<span class="token punctuation">.</span>m<span class="token operator">=</span>U<span class="token punctuation">.</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			subU<span class="token punctuation">.</span>n<span class="token operator">=</span>U<span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>ii<span class="token operator">&lt;=</span>U<span class="token punctuation">.</span>m<span class="token punctuation">;</span>ii<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> jj<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>jj<span class="token operator">&lt;=</span>U<span class="token punctuation">.</span>n<span class="token punctuation">;</span>jj<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
					<span class="token keyword">if</span><span class="token punctuation">(</span>jj<span class="token operator">==</span>i<span class="token punctuation">)</span>
						<span class="token keyword">continue</span><span class="token punctuation">;</span>
					flag<span class="token operator">++</span><span class="token punctuation">;</span>
					subU<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>ii<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token operator">=</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> 
				allmid<span class="token operator">-=</span><span class="token function">det</span><span class="token punctuation">(</span>subU<span class="token punctuation">)</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> 
				allmid<span class="token operator">+=</span><span class="token function">det</span><span class="token punctuation">(</span>subU<span class="token punctuation">)</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> allmid<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	mx A<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the size of the determinant."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter a space between them."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>A<span class="token punctuation">.</span>m<span class="token operator">>></span>A<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the elements (matrix form)."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cin<span class="token operator">>></span>A<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"| "</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span>A<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>	
		<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>A<span class="token punctuation">.</span>m<span class="token punctuation">)</span> 
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"|"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token keyword">else</span> 
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"|"</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span> 
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"  =  "</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>m<span class="token operator">!=</span>A<span class="token punctuation">.</span>n<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"no result !!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token function">det</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>late</title>
    <url>/late/</url>
    <content><![CDATA[<p>本性善良的人都晚熟，<br>并且是被劣人催熟的，<br>后来虽然开窍了，<br>但他仍然善良与赤诚，<br>不断寻找同类，<br>最后变成最孤独的一个人。</p>
<p>为什么不断寻找同类，最后却只剩下孤独？<br>因为很多人在寻找的过程中，<br>把善良的本性弄丢了。<br>因为在这个俗世，<br>善良的代价就是不断被伤害，<br>而最后所有的刀枪不入，<br>都是因为学会的用伪装和圆滑去自我保护，</p>
<p>所以，在一个功利主义至上的社会里，<br>一个人想要一直保持单纯的善良，<br>真的是很难很难，<br>只有先回归公平，才可能回归善良！</p>
]]></content>
  </entry>
  <entry>
    <title>memory</title>
    <url>/memory/</url>
    <content><![CDATA[<p>一些三年前写的代码<br>现在看看确实是一些回忆</p>
<p>Luogu P1018<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span> strings<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
string s<span class="token punctuation">;</span>
string f<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
string <span class="token function">mul</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len1<span class="token punctuation">,</span>len2<span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    len1<span class="token operator">=</span>len2<span class="token operator">=</span> <span class="token number">51</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>len1<span class="token operator">-</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span> <span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>len2<span class="token operator">-</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span> <span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span>
            C<span class="token punctuation">[</span>i<span class="token operator">+</span>j <span class="token punctuation">]</span> <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span> 
        
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        C<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">;</span>
        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">;</span>   
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">51</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48</span> <span class="token punctuation">;</span>

    <span class="token keyword">return</span> a <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
string <span class="token function">max</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b <span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span>
string <span class="token function">cs</span><span class="token punctuation">(</span><span class="token keyword">int</span> ks<span class="token punctuation">,</span><span class="token keyword">int</span> js<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    strings sum <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">51</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token punctuation">;</span>sum<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span> <span class="token punctuation">;</span>

    <span class="token keyword">int</span> t<span class="token operator">=</span> <span class="token number">50</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>js<span class="token punctuation">;</span>i<span class="token operator">>=</span>ks<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>t<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>

    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> i<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">51</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>
    cin<span class="token operator">>></span> s <span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">mul</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">cs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">;</span>
    <span class="token function">write</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
  </entry>
  <entry>
    <title>memory2</title>
    <url>/memory2/</url>
    <content><![CDATA[<p>三年前写过的一道练习题</p>
<p>加分二叉树<br>LuoguP1040</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> rt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>	
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">way</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>rt<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token function">way</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>rt<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">way</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cin<span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>left<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> right<span class="token operator">=</span>left<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
				rt<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                rt<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>	
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    rt<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">way</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>mignon1</title>
    <url>/mignon1/</url>
    <content><![CDATA[<p>mignon为什么画的如此之好？<br><img src="/img/mignon/m1.jpg" alt="haha"><br>Source: <a href="https://www.pixiv.net/en/artworks/91206125">https://www.pixiv.net/en/artworks/91206125</a><br>By Pixiv User : Mignon</p>
]]></content>
  </entry>
  <entry>
    <title>my_first_LaTeX_homework</title>
    <url>/my-first-LaTeX-homework/</url>
    <content><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>I heard about LaTeX from Ben. He told me our school’s previous Calculus 3 teacher stipulated that students in his class must use LaTeX to write their homework.  At the beginning of summer vacation, I started to learn some basic knowledge about LaTeX. Thanks to my C++ knowledge, I have learned some of the rudimentary knowledge about LaTeX. However, if some complex demands appear, I could only use it as a Google-based language(LOL).<br>This is my AP Statistics Course Summer Homework. Made by LaTeX, edited by VS code.  </p>
<span id="more"></span>
<h4 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass&#123;article&#125;
\title&#123;AP Statistics Summer Homework&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;August 11,2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;
\usepackage&#123;boondox-calo&#125;
\usepackage&#123;fontspec&#125;

\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]


\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;63&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;63&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;63&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;63&#125;&#125;&#125;
&#125;
\begin&#123;document&#125;

\maketitle

\section&#123;Concepts \&amp; Definitions \&amp; Examples&#125;
\subsection&#123;Why Study Statistics?&#125;
1. Extract information from tables, charts, and graphs.\\
2. Follow numerical arguments.\\
3. Understand the basics of how data should be gathered, summarized, and analyzed to draw statistical conclusions.\\
\underline&#123;Example&#125;: No example.
\subsection&#123;The Nature and Role of Variability&#125;
\paragraph&#123;Variability&#125;
is a kind of notion about natural diversity. \\
\underline&#123;Example&#125;: People nowadays have 56 types of genders(A gender study student told me).
\paragraph&#123;Histogram&#125; 
is a bar graph-like representation of data that buckets a range of outcomes into columns along the x-axis. The y-axis represents the number count or percentage of occurrences in the data for each column and can be used to visualize data distributions.\\
\underline&#123;Example&#125;:

\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;histogram.png&#125;
\caption&#123;A Sample of Histogram&#125;
\end&#123;figure&#125;

\subsection&#123;Statistics and the Data Analysis Process&#125;
\paragraph&#123;Process of collecting data&#125;
: We need to follow these six steps:\\
1. Understanding the nature of the problem.\\
2. Deciding what to measure and how to measure it.\\
3. Data collection.\\
4. Data summarization and preliminary analysis.\\
5. Formal data analysis. \\
6. Interpretation of results.\\
\underline&#123;Example&#125;: No.\\

\paragraph&#123;Population of Interest&#125;
The entire collection of individuals or objects about which information is desired is called the population of interest.
\\
\underline&#123;Example&#125;: If I want to find out the the effect of allowing BNDS students to make boy&#x2F;girl friends at school. BNDS students is the population of interest in this case. 
\paragraph&#123;Sample&#125;
A sample is a subset of the population, selected for study.
\\
\underline&#123;Example&#125;: There are approximately 900 students in BNDS International Department, I select 30 students for my investigation.

\paragraph&#123;Descriptive Statistics&#125;
is a branch of statistics about using methods to organize and summarize data.
\\
\underline&#123;Example&#125;: This is a defination of a branch subject so that I can&#39;t list a example.

\paragraph&#123;Inferential Statistics&#125;
is the second major branch of statistics about generalizing the conclusion from sample to the whole population.
\\
\underline&#123;Example&#125;: This is a defination of a branch subject so that I can&#39;t list a example.
\subsection&#123;Tpye of Data and Some Simple Graphical Displays&#125;

\paragraph&#123;Univariate Data Set&#125;
A data set consisting of observations on a single characteristic is a univariate data set.
\\
\underline&#123;Example&#125;: All of the students&#39; height in BNDS.


\paragraph&#123;Categorical data&#125;
Individual observations are categorical responses (nonnumerical).
\\
\underline&#123;Example&#125;: Gender types.


\paragraph&#123;Numerical data&#125;
Individual observations are numerical (quantitative) in nature.
\\
\underline&#123;Example&#125;: GPA of each students in BNDS.


\paragraph&#123;Discrete \&amp; Continuous Data Set&#125;
A numerical variable results in discrete data if the possible values of the variable correspond to isolated points on the number line. 
\\
A numerical variable results in continuous data if the set of possible values forms an entire interval on the number line.
\\
\underline&#123;Example&#125;: Discrete: The set of students enrollment of each high schools in Beijing.
\\
\underline&#123;Example&#125;: Continuous: The set of height of students in BNDS.


\paragraph&#123;Univariate, bivariate and multivariate data&#125;

Each observation consists of one (univariate), two (bivariate), or two or more (multivariate) responses or values.

\underline&#123;Example&#125;: Heights. Heighs, age. Heighs, age, GPA, etc.




\paragraph&#123;Relative Frequency&#125;

The relative frequency for a particular category is calculated as
\[
    \mathcal&#123;relative\ frequency &#x3D; \frac&#123;frequency&#125;&#123;number\ of\ obervations\ in\ the\ data\ set&#125;&#125;
\]




\paragraph&#123;Bar Charts&#125;
A bar chart is a graph of a frequency distribution of categorical data.
\\
\underline&#123;Example&#125;:
\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;bar.png&#125;
\end&#123;figure&#125;
    
\paragraph&#123;Dotplots&#125;
A dotplot is a simple way to display numerical data when the data set is reasonably 
small. Each observation is represented by a dot above the location corresponding to 
its value on a horizontal measurement scale. When a value occurs more than once, 
there is a dot for each occurrence and these dots are stacked vertically.
\\
\underline&#123;Example&#125;:
\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;dd.png&#125;
\end&#123;figure&#125;

\section&#123;PS&#125;
\subsection&#123;Website&#125;
\paragraph&#123;Welcome to my website: lzclink.com&#125;
\qrcode&#123;lzclink.com&#125;

\subsection&#123;Version&#125;
\paragraph&#123;Recent Version:&#125;
This is TeX, Version 3.141592653 (TeX Live 2021&#x2F;W32TeX) (preloaded format&#x3D;tex)
\subsection&#123;Editor&#125;
\paragraph&#123;Edit via Visual Studio Code&#125;
\subsection&#123;Daily Poem&#125;

\begin&#123;tikzpicture&#125;
    \node[text width&#x3D;8cm,align&#x3D;center](Text)&#123;%
    In visions of the dark night\\
    I have dreamed of joy departed-\\
    But a waking dream of life and light\
    Hath left me broken-hearted.\\

    Ah! what is not a dream by day\\
    To him whose eyes are cast \\
    On things around him with a ray \\
    Turned back upon the past? \\

    That holy dream- that holy dream,\\
    While all the world were chiding,\\
    Hath cheered me as a lovely beam\\
    A lonely spirit guiding.\\

    What though that light, thro&#39; storm and night,\\
    So trembled from afar- \\
    What could there be more purely bright \\
    In Truth&#39;s day-star? \\
    \vspace&#123;24pt&#125;
     A Dream (1827) by Edgar Allan Poe
    &#125; ;

    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(-.5cm,.5cm)&#125;,anchor&#x3D;north west](CNW)  at (Text.north west)
         &#123;\pgfornament[width&#x3D;1.75cm]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(.5cm,.5cm)&#125;,anchor&#x3D;north east](CNE)   at (Text.north east)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(-.5cm,-.5cm)&#125;,anchor&#x3D;south west](CSW) at (Text.south west)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(.5cm,-.5cm)&#125;,anchor&#x3D;south east](CSE)  at (Text.south east)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;61&#125;&#125;;
    \pgfornamenthline&#123;CNW&#125;&#123;CNE&#125;&#123;north&#125;&#123;87&#125;
    \pgfornamenthline&#123;CSW&#125;&#123;CSE&#125;&#123;south&#125;&#123;87&#125;
    \pgfornamentvline&#123;CNW&#125;&#123;CSW&#125;&#123;west&#125;&#123;87&#125;
    \pgfornamentvline&#123;CNE&#125;&#123;CSE&#125;&#123;east&#125;&#123;87&#125;
    \end&#123;tikzpicture&#125;

\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p><img src="/img/sta1.png" alt="sta1"><br><img src="/img/sta2.png" alt="sta2"></p>
<h4 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h4>]]></content>
  </entry>
  <entry>
    <title>mental_assessment</title>
    <url>/mental-assessment/</url>
    <content><![CDATA[<p>A confirmatory program about one example from school’s mathematical modeling class.<br>C++.</p>
<span id="more"></span>
<h4 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;Windows.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span></span><span class="token string">"Ofast"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token string">"inline"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token comment">//#pragma GCC optimize(3)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> <span class="token keyword">int</span> ct<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ck<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> fu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>
			fu<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		ck<span class="token operator">=</span>ck<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> fu<span class="token operator">*</span>ck<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>r<span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>mid<span class="token punctuation">)</span> 
			i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>mid<span class="token punctuation">)</span> 
			j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> 
		<span class="token function">qsort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> 
		<span class="token function">qsort</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">struct</span> <span class="token class-name">ans</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> normal<span class="token punctuation">,</span> tic<span class="token punctuation">,</span> minia<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">qu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> x<span class="token punctuation">;</span>
	<span class="token keyword">return</span> x<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> yy<span class="token operator">=</span><span class="token number">100.0000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//	freopen("in.txt","r",stdin);</span>
<span class="token comment">//	freopen("out.txt","w",stdout);	</span>
<span class="token comment">//	srand(time(0));	</span>
	<span class="token keyword">double</span> totalnormal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>totaltic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>totalminia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> meantotalnormal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> meantotaltic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> meantotalminia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	ans answer<span class="token punctuation">;</span>
	<span class="token keyword">double</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the number of times you want to simulate"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Remember! for each times of simulation, the program will process 1e9 times random data."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"You had better enter a number less than 40."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"And please wait with patience."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">int</span> start<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> acc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>acc<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>acc<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">+</span>j<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token comment">//cout&lt;&lt;"h1"&lt;&lt;endl;</span>
				<span class="token keyword">double</span> k<span class="token operator">=</span><span class="token number">100</span><span class="token operator">-</span>i<span class="token operator">-</span>j<span class="token punctuation">;</span>
				<span class="token keyword">int</span> normal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
						<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>
						<span class="token comment">//cout&lt;&lt;p&lt;&lt;endl;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> 
							normal<span class="token operator">++</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>i<span class="token operator">&amp;&amp;</span>p<span class="token operator">&lt;</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> 
							tic<span class="token operator">++</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>i<span class="token operator">+</span>j<span class="token operator">&amp;&amp;</span>p<span class="token operator">&lt;=</span><span class="token number">99</span><span class="token punctuation">)</span>
							minia<span class="token operator">++</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
					ct<span class="token punctuation">[</span>normal<span class="token punctuation">]</span><span class="token punctuation">[</span>tic<span class="token punctuation">]</span><span class="token punctuation">[</span>minia<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
					normal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					tic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					minia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
				<span class="token punctuation">&#125;</span> 	
				<span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">></span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					flag<span class="token operator">=</span>ct<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>normal<span class="token operator">=</span>i<span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>tic<span class="token operator">=</span>j<span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>minia<span class="token operator">=</span>k<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token comment">//cout&lt;&lt;"h3"&lt;&lt;endl;</span>
				<span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 	<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		cout<span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>normal<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>tic<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>minia<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		totalnormal<span class="token operator">+=</span>answer<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>
		totaltic<span class="token operator">+=</span>answer<span class="token punctuation">.</span>tic<span class="token punctuation">;</span>
		totalminia<span class="token operator">+=</span>answer<span class="token punctuation">.</span>minia<span class="token punctuation">;</span>
		flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//cout&lt;&lt;meantotaltic&lt;&lt;endl;</span>
	meantotalnormal<span class="token operator">=</span>totalnormal<span class="token operator">/</span>n<span class="token punctuation">;</span>
	meantotaltic<span class="token operator">=</span>totaltic<span class="token operator">/</span>n<span class="token punctuation">;</span>
	meantotalminia<span class="token operator">=</span>totalminia<span class="token operator">/</span>n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"average: "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"normal: "</span><span class="token operator">&lt;&lt;</span>meantotalnormal<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"tic: "</span><span class="token operator">&lt;&lt;</span>meantotaltic<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"minia: "</span><span class="token operator">&lt;&lt;</span>meantotalminia<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">int</span> timecost<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"time cost= "</span><span class="token operator">&lt;&lt;</span>timecost<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>note1</title>
    <url>/note1/</url>
    <content><![CDATA[<p>所有人对所有人在不同地点所展现出来的样子是不同的。但这也是不可避免的，也是人类这一生物为了社群性生活而诞生出的劣根性之一。但这一特性没有什么不好，只要其中一方不依据某种途径得知了他人对待自己的不同评价，这一特性会让人与人之间，至少在表面上，十分和谐。</p>
]]></content>
  </entry>
  <entry>
    <title>note3</title>
    <url>/note3/</url>
    <content><![CDATA[<p>有人说“言多必失”，实际上确实是这样，言语并不能带来什么实际性的东西，但是有的时候会带来不好的后果。<br>如果你常常以“夸”的姿态来说话，确实不容易出问题，但是会让人认为你讨厌。<br>如果你常常以“真实”的姿态来说话，有的时候别人不开心就会出问题。<br>但无论是“夸”还是“真实”，都不会带来什么实质性性的好处，尤其是在社交媒体或者是网络上，有的时候还会招来麻烦，或者被利用。<br>所以最好的方法是什么呢？ 正所谓“三缄其口”<br>少说，或者不说，多听，多看，多想，在评判一件事物之前一定要对这个事物有了解，不要对待任何事情都以玩笑的态度来对待。</p>
]]></content>
  </entry>
  <entry>
    <title>note2</title>
    <url>/note2/</url>
    <content><![CDATA[<p>没有永远的神。<br>随着独立思考和知识的增多，你会逐渐发现有的同龄人或者老师或者权威，并不是一直正确的。于是有的人开始因为一个点便全盘否认他，对他说的话完全不听。<br>也有的人坚信他是完全正确的，对他说的话完全的信服并且改变自己原先的观点。<br>但是我觉得没有完美无瑕的东西，信也不能全信，也不能不信。</p>
]]></content>
  </entry>
  <entry>
    <title>pass_river</title>
    <url>/pass-river/</url>
    <content><![CDATA[<p><strong><em>Mathematical　Modeling　Homework</em></strong></p>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p><img src="/img/mm_1/q.png" alt="q"></p>
<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p><img src="/img/mm_1/r.png" alt="result1"><br><img src="/img/mm_1/rr.jpg" alt="result2"><br><span id="more"></span></p>
<h4 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">/*
-3 0   1
-2 -1  2
-1 -2  3
0  -3  4
+3  0  5
+2  +1 6
+1  +2 7
0  +3  8
-2 0  a
-1 -1 b
0 -2 c
+2 0 d
+1 +1 e
0 +2 f
-1 0 g
0 -1 h
+1 0 i
0 +1 j
用字符串编码来记录每一步
如果步不对 则删掉 
flag=1 是下一步左下  -1是下一步右上 
*/</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//cout&lt;&lt;"q";</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">///	cout&lt;&lt;"a"&lt;&lt;endl;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//		cout&lt;&lt;"!";</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span> 
			<span class="token comment">//cout&lt;&lt;"2";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'4'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'h'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">//cout&lt;&lt;"o";</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'5'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'6'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'7'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'8'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		
		<span class="token punctuation">&#125;</span> 
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'e'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'f'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'i'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'j'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>	
	
<span class="token punctuation">&#125;</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
		s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
				m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//[1] down&amp;left 1:can&amp;haven't</span>
		m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//[0] up&amp;right</span>
		m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//	for(int i=0;i&lt;=5;i++)&#123;</span>
<span class="token comment">//		for(int j=0;j&lt;=5;j++)&#123;</span>
<span class="token comment">//			cout&lt;&lt;m[i][j][0]&lt;&lt;" ";</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		cout&lt;&lt;endl;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	for(int i=0;i&lt;=5;i++)&#123;</span>
<span class="token comment">//		for(int j=0;j&lt;=5;j++)&#123;</span>
<span class="token comment">//			cout&lt;&lt;m[i][j][1]&lt;&lt;" ";</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		cout&lt;&lt;endl;</span>
<span class="token comment">//	&#125; </span>
	<span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>note4</title>
    <url>/note4/</url>
    <content><![CDATA[<p>当你走在大马路上，发生了一个吵架，或者斗殴，或者车祸。看热闹的人永远是最多的，为什么呢？首先，看热闹的成本很少，除非你被砸死，而且能图一乐，<br>周围的群众也可以过一把”裁判的瘾“，很多人想做上帝。<br>而且可以显得平时平平无奇的人，在这个时候很有理性和智慧。所以人们非常喜欢看热闹，无论是图一乐、还是落井下石、还是理中客、还是当圣母假惺惺。都能带给他们无上的快感。</p>
]]></content>
  </entry>
  <entry>
    <title>ref1</title>
    <url>/ref1/</url>
    <content><![CDATA[<p>再分享一篇十分好的同样来自迟先生的文章，讲述他自己的大学生涯。</p>
<h3 id="FA001-Intro-to-Failure"><a href="#FA001-Intro-to-Failure" class="headerlink" title="FA001: Intro to Failure"></a>FA001: Intro to Failure</h3><p><a href="https://www.skyzh.dev/pages/about/">https://www.skyzh.dev/pages/about/</a></p>
]]></content>
  </entry>
  <entry>
    <title>quicksort</title>
    <url>/quicksort/</url>
    <content><![CDATA[<p>今天忽然到洛谷上看到自己三年前，还没有退役的时候写的代码<br>感慨万千<br>初二初三高一的不学习沉迷lol上课睡觉打游戏从来没写过作业导致了现在废物的我<br>一个快排模板</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>
	<span class="token keyword">int</span> j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> tot<span class="token operator">=</span>left<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">||</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
				tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>left<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
		s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">msort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token function">msort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">msort</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">same</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cin<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token function">msort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>ref0</title>
    <url>/ref0/</url>
    <content><![CDATA[<p>在知乎上偶然发现迟先生的一篇非常好的文章。<br>上海交通大学计算机系年级第一的心路历程和深刻思考。<br>与恶龙斗，其乐无穷<br><a href="https://zhuanlan.zhihu.com/p/345269981">https://zhuanlan.zhihu.com/p/345269981</a></p>
]]></content>
  </entry>
  <entry>
    <title>search</title>
    <url>/search/</url>
    <content><![CDATA[<h3 id="APCSA必备的-几种遍历查找的方法"><a href="#APCSA必备的-几种遍历查找的方法" class="headerlink" title="APCSA必备的 几种遍历查找的方法"></a>APCSA必备的 几种遍历查找的方法</h3><h5 id="Content"><a href="#Content" class="headerlink" title="Content:"></a>Content:</h5><ol>
<li>Binary Search</li>
<li>Linear Search</li>
</ol>
<h4 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h4><p>二分法大家相比都已经很熟悉了，这个说白了就是在一个单调递增/减的数组里通过二分的方法不断将选区缩小到目标值。</p>
<p>记住: 必须是单调递增/减的数组</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> std<span class="token operator">=</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">,</span>j<span class="token operator">=</span>right<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;=</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>i<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> middle<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            middle<span class="token operator">=</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>s<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                left<span class="token operator">=</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                right<span class="token operator">=</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Which number would you want to search?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> t<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It is located at the "</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'s place in the sorted array."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h4 id="Linear-Search"><a href="#Linear-Search" class="headerlink" title="Linear Search"></a>Linear Search</h4><p>这个不多说了</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> std<span class="token operator">=</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">,</span>j<span class="token operator">=</span>right<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;=</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>i<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> middle<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            middle<span class="token operator">=</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>s<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                left<span class="token operator">=</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                right<span class="token operator">=</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Which number would you want to search?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> t<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It is located at the "</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'s place in the sorted array."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>ref2</title>
    <url>/ref2/</url>
    <content><![CDATA[<p>本文来自rust社区wiki</p>
<h3 id="什么是Rust"><a href="#什么是Rust" class="headerlink" title="什么是Rust"></a>什么是Rust</h3><p>针对初学者和专业人员的 Rust 编程语言文档，Rust 从设计之初遍是为了更好的内存安全，现在已可作为生产力语言。</p>
<p>Rust 是一门系统级编程语言，开始由 Graydon Hoare 开发。后来 Mozilla 实验室接管了此项目</p>
<h3 id="应用级编程语言-v-s-系统级编程语言"><a href="#应用级编程语言-v-s-系统级编程语言" class="headerlink" title="应用级编程语言 v/s 系统级编程语言"></a>应用级编程语言 v/s 系统级编程语言</h3><p>像 Java/C# 的应用级编程语言被用来构建直接服务于用户的应用程序。比如我们常用的 Excel， World 应用程序，网站和手机 App。</p>
<p>像 C/C++ 这类的属于系统级编程语言，常用来构建软件和软件平台，操作系统，游戏引擎，编译器，等等 。通常会需要一些偏底层的操作，比如大量的和硬件交互。</p>
<p>系统级比应用级有两个主要的问题</p>
<ul>
<li>编写内存安全的代码很困难。</li>
<li>编写多线程代码很困难。</li>
</ul>
<h3 id="Rust-是什么"><a href="#Rust-是什么" class="headerlink" title="Rust 是什么"></a>Rust 是什么</h3><ul>
<li><p>Rust 是一个系统级编程语言，被 Mozilla 员工 “Graydon Hoare” 于 2006 年 开发。他形容 Rust 是一种线程安全的支持并发的实用型的编程语言，支持函数式编程与命令式编程。</p>
</li>
<li><p>rust 的语法和 C++ 类似。</p>
</li>
<li>Rust 是免费开源的软件，即任何人可以免费的使用它，并且源代码是开源分享的，因此人们还可以去提高它的软件设计。</li>
<li>在 2016 年，2017 年和 2018 年的 stack overflow 开发人员调查中，Rust 被评比为 “最受欢迎的编程语言” 之一。</li>
<li>没有例如 calloc（动态内存分配并做初始化）或者 malloc（动态内存分配不做初始化）这样直接的内存管理模式。这意味着，内存会由 Rust 进行内部管理。</li>
</ul>
<h3 id="为什么选择-Rust"><a href="#为什么选择-Rust" class="headerlink" title="为什么选择 Rust"></a>为什么选择 Rust</h3><p>Rust 关注三个目标</p>
<ul>
<li>安全</li>
<li>快速</li>
<li>并发</li>
</ul>
<p>该语言旨在以简单的方式开发高度可靠且快速的软件系统。Rust 可被用于从高级程序到硬件特定程序的编写。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>Rust 编程语言没有设计垃圾回收器（ GC ）。这个设计提高了程序运行的性能（译者注：相对于其他设计有 GC 的编程语言，例如 Java 和 C# ）。</p>
<h3 id="编译时内存的安全性"><a href="#编译时内存的安全性" class="headerlink" title="编译时内存的安全性"></a>编译时内存的安全性</h3><p>使用 Rust 构建的软件可以避免出现诸如空指针，缓存溢出和内存泄漏的内存问题。</p>
<h3 id="多线程应用"><a href="#多线程应用" class="headerlink" title="多线程应用"></a>多线程应用</h3><p>Rust 所有权和内存安全的特性为没有数据竞争的并发提供了支撑。</p>
<h3 id="支持-Web-Assembly-WASM"><a href="#支持-Web-Assembly-WASM" class="headerlink" title="支持 Web Assembly (WASM)"></a>支持 Web Assembly (WASM)</h3><p>Web Assembly 有助于，在浏览器，嵌入式设备或者其他任何地方，执行计算密集型算法。它的运行速度和本机代码一样飞快。 Rust 可以被编译成 Web Assembly ，以保证代码执行的快速和可靠。</p>
<h3 id="Rust-带来了什么"><a href="#Rust-带来了什么" class="headerlink" title="Rust 带来了什么"></a>Rust 带来了什么</h3><p>因为许多理由，Rust 语言成为很多人的最佳选择。</p>
<p>让我们来看一看，都有哪些缘由：</p>
<ul>
<li>开发者团队： 事实证明，对于开发者团队， Rust 非常实用。低水平的编程代码会包含很多 bug，需要测试人员进行覆盖测试广泛验证。然而，对于 Rust ，如果程序包含 bug，编译器将拒绝编译代码。因为编译器的并行编译工作，开发者可以专注在程序的逻辑实现而不是 bug。</li>
<li>学术： 许多人可以学习如何使用 Rust 开发操作系统。 Rust 团队正在努力让普罗大众更容易理解系统概念，特别是对于编程新手。</li>
<li>公司： 有大公司也有小公司使用 Rust 完成各种开发任务。这些任务包括命令行工具，Web 服务，DevOps 工具，嵌入式设备，音频和视频的分析和转码，加密货币，生物信息学，搜索引擎，物联网应用，机器学习，甚至是火狐浏览器的重要组成部分。</li>
<li>开源开发者：  Rust 是一种开源的编程语言，这意味着源代码可以供人们任意使用。因此，人们还可以利用开源的源代码参与进提升 Rust 设计的工作。</li>
</ul>
<p>————————————————<br>原文作者：Summer<br>转自链接：<a href="https://learnku.com/rust/wikis/36705">https://learnku.com/rust/wikis/36705</a><br>版权声明：著作权归作者所有。商业转载请联系作者获得授权，非商业转载请保留以上作者信息和原文链接。</p>
]]></content>
  </entry>
  <entry>
    <title>template0</title>
    <url>/template0/</url>
    <content><![CDATA[<p>A very elegant economics homework template</p>
<p><a href="https://github.com/Link-BNDS/Economics_Template">https://github.com/Link-BNDS/Economics_Template</a></p>
<pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass[12pt]&#123;article&#125;
\title&#123;AP Micro \&amp; Macro Economics Monopoly Homework&#125;
\author&#123;Link Li \&amp; Zizi Yang\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;\today&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
\usepackage&#123;fontspec&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;

\setmainfont&#123;texgyrepagella-regular.otf&#125;[
BoldFont &#x3D; texgyrepagella-bold.otf ,
ItalicFont &#x3D; texgyrepagella-italic.otf ,
BoldItalicFont &#x3D; texgyrepagella-bolditalic.otf ]

\setsansfont&#123;texgyrepagella-regular.otf&#125;[
BoldFont &#x3D; texgyrepagella-bold.otf ,
ItalicFont &#x3D; texgyrepagella-italic.otf ,
BoldItalicFont &#x3D; texgyrepagella-bolditalic.otf ]

\setmonofont&#123;texgyrepagella-regular.otf&#125;[
BoldFont &#x3D; texgyrepagella-bold.otf ,
ItalicFont &#x3D; texgyrepagella-italic.otf ,
BoldItalicFont &#x3D; texgyrepagella-bolditalic.otf ]

\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;35&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;35&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;35&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;35&#125;&#125;&#125;
&#125;

\begin&#123;document&#125;
\maketitle

\end&#123;document&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>share</title>
    <url>/share/</url>
    <content><![CDATA[<p>分享几张图片<br><img src="/img/share/11.jpg" alt="11"><br><img src="/img/share/22.png" alt="22"><br><img src="/img/share/33.png" alt="33"></p>
]]></content>
  </entry>
  <entry>
    <title>winter00</title>
    <url>/winter00/</url>
    <content><![CDATA[<p>怀念札幌的冬<br><img src="/img/winter0.jpg" alt="w0"></p>
]]></content>
  </entry>
  <entry>
    <title>sort</title>
    <url>/sort/</url>
    <content><![CDATA[<h3 id="AP-CSA-Sorting-Algorithms"><a href="#AP-CSA-Sorting-Algorithms" class="headerlink" title="AP CSA Sorting Algorithms"></a>AP CSA Sorting Algorithms</h3><p> 没想到AP CSA居然也涉及排序的内容<br>本篇就分享几种基本的排序算法以及JAVA代码实现</p>
<h5 id="Content"><a href="#Content" class="headerlink" title="Content:"></a>Content:</h5><ol>
<li>Bubble Sort</li>
<li>Insert Sort</li>
<li>Select Sort</li>
<li>Quick Sort</li>
<li>Bucket Sort</li>
</ol>
<h4 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h4><p>一种简单但是十分低效的算法。<br>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一轮比较中：首先比较第1个和第2个数，将小数放前，大数放后；然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。重复第一轮的步骤，直至全部排序完成。<br>如果能看到算法可视化的话，就可以看到小的数像气泡一样，一点一点的从下面浮上来，所以叫bubble sort，冒泡排序。</p>
<p>Java 实现:<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">/*
        for(int i=0;i&lt;n;i++)&#123;
            for(int j=i+1;j&lt;n;j++)&#123;
                if(a[i]>a[j])&#123;
                    int ins=a[i];
                    a[i]=a[j];
                    a[j]=ins;
                &#125;
            &#125;
        &#125;
        */</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">int</span> ins<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>ins<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="Insert-Sort"><a href="#Insert-Sort" class="headerlink" title="Insert Sort"></a>Insert Sort</h4><p>把待排序的纪录按其关键码值的大小逐个插入到一个已经排好序的有序序列中，直到所有的纪录插入完为止，得到一个新的有序序列</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> std<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Select-Sort"><a href="#Select-Sort" class="headerlink" title="Select Sort"></a>Select Sort</h4><p>在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。 </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> flag<span class="token operator">=</span>i<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    flag<span class="token operator">=</span>j<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">int</span> ins<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token operator">=</span>ins<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h4><p>也就是常说的快速排序， 综合上来讲最快也是最好的排序算法之一，记住别爆栈。</p>
<p>基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一轮扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分，直到各区间只有一个数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> std<span class="token operator">=</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">,</span>j<span class="token operator">=</span>right<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;=</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>i<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>std<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h4 id="Bucket-Sort"><a href="#Bucket-Sort" class="headerlink" title="Bucket Sort"></a>Bucket Sort</h4><p>桶排序 最典型的空间换时间的例子</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BucketSort</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter numbers of elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000005</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Sources-amp-References"><a href="#Sources-amp-References" class="headerlink" title="Sources&amp;References"></a>Sources&amp;References</h4><p><a href="https://www.cnblogs.com/zwtgyh/p/10631760.html">https://www.cnblogs.com/zwtgyh/p/10631760.html</a><br><a href="https://blog.csdn.net/left_la/article/details/8656425">https://blog.csdn.net/left_la/article/details/8656425</a><br><a href="https://www.cnblogs.com/zwb2jcy/p/9110676.html">https://www.cnblogs.com/zwb2jcy/p/9110676.html</a><br><a href="https://blog.csdn.net/qq_38790716/article/details/85929469">https://blog.csdn.net/qq_38790716/article/details/85929469</a><br><a href="https://blog.csdn.net/qq_36770641/article/details/82669788">https://blog.csdn.net/qq_36770641/article/details/82669788</a></p>
]]></content>
  </entry>
</search>
